"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUpdates = void 0;
var _types = require("../../../common/types");
var _constants = require("../../../common/constants");
var _savedObject = require("../saved-object");
var _pluginServices = require("../../plugin-services");
const getUpdates = async (queryApi = false, forceQuery = false) => {
  try {
    if (!queryApi) {
      const availableUpdates = await (0, _savedObject.getSavedObject)(_constants.SAVED_OBJECT_UPDATES);
      return availableUpdates;
    }
    const {
      manageHosts,
      api: wazuhApiClient
    } = (0, _pluginServices.getWazuhCore)();
    const hosts = await manageHosts.get();
    const apisAvailableUpdates = await Promise.all(hosts === null || hosts === void 0 ? void 0 : hosts.map(async api => {
      const data = {};
      const method = 'GET';
      const path = `/manager/version/check?force_query=${forceQuery}`;
      const options = {
        apiHostID: api.id,
        forceRefresh: true
      };
      try {
        const response = await wazuhApiClient.client.asInternalUser.request(method, path, data, options);
        const update = response.data.data;
        const {
          current_version,
          update_check,
          last_available_major,
          last_available_minor,
          last_available_patch,
          last_check_date
        } = update;
        const getStatus = () => {
          if (update_check === false) {
            return _types.API_UPDATES_STATUS.DISABLED;
          }
          if (last_available_major !== null && last_available_major !== void 0 && last_available_major.tag || last_available_minor !== null && last_available_minor !== void 0 && last_available_minor.tag || last_available_patch !== null && last_available_patch !== void 0 && last_available_patch.tag) {
            return _types.API_UPDATES_STATUS.AVAILABLE_UPDATES;
          }
          return _types.API_UPDATES_STATUS.UP_TO_DATE;
        };
        return {
          current_version,
          update_check,
          last_available_major,
          last_available_minor,
          last_available_patch,
          last_check_date: last_check_date || undefined,
          api_id: api.id,
          status: getStatus()
        };
      } catch (e) {
        var _e$response, _e$response$data$deta, _e$response2;
        const error = {
          title: (_e$response = e.response) === null || _e$response === void 0 || (_e$response = _e$response.data) === null || _e$response === void 0 ? void 0 : _e$response.title,
          detail: (_e$response$data$deta = (_e$response2 = e.response) === null || _e$response2 === void 0 || (_e$response2 = _e$response2.data) === null || _e$response2 === void 0 ? void 0 : _e$response2.detail) !== null && _e$response$data$deta !== void 0 ? _e$response$data$deta : e.message
        };
        return {
          api_id: api.id,
          status: _types.API_UPDATES_STATUS.ERROR,
          error
        };
      }
    }));
    const savedObject = {
      apis_available_updates: apisAvailableUpdates,
      last_check_date: new Date()
    };
    await (0, _savedObject.setSavedObject)(_constants.SAVED_OBJECT_UPDATES, savedObject);
    return savedObject;
  } catch (error) {
    const message = error instanceof Error ? error.message : typeof error === 'string' ? error : 'Error trying to get available updates';
    const {
      logger
    } = (0, _pluginServices.getWazuhCheckUpdatesServices)();
    logger.error(message);
    return Promise.reject(error);
  }
};
exports.getUpdates = getUpdates;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,