"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUpdatesRoute = void 0;
var _configSchema = require("@osd/config-schema");
var _constants = require("../../../common/constants");
var _updates = require("../../services/updates");
const getUpdatesRoute = router => {
  router.get({
    path: _constants.routes.checkUpdates,
    validate: {
      query: _configSchema.schema.object({
        query_api: _configSchema.schema.maybe(_configSchema.schema.string()),
        force_query: _configSchema.schema.maybe(_configSchema.schema.string())
      })
    }
  }, async (context, request, response) => {
    try {
      var _request$query, _request$query2;
      const updates = await (0, _updates.getUpdates)(((_request$query = request.query) === null || _request$query === void 0 ? void 0 : _request$query.query_api) === 'true', ((_request$query2 = request.query) === null || _request$query2 === void 0 ? void 0 : _request$query2.force_query) === 'true');
      return response.ok({
        body: updates
      });
    } catch (error) {
      const finalError = error instanceof Error ? error : typeof error === 'string' ? new Error(error) : new Error(`Error trying to get available updates`);
      return response.customError({
        statusCode: 503,
        body: finalError
      });
    }
  });
};
exports.getUpdatesRoute = getUpdatesRoute;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnU2NoZW1hIiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJfdXBkYXRlcyIsImdldFVwZGF0ZXNSb3V0ZSIsInJvdXRlciIsImdldCIsInBhdGgiLCJyb3V0ZXMiLCJjaGVja1VwZGF0ZXMiLCJ2YWxpZGF0ZSIsInF1ZXJ5Iiwic2NoZW1hIiwib2JqZWN0IiwicXVlcnlfYXBpIiwibWF5YmUiLCJzdHJpbmciLCJmb3JjZV9xdWVyeSIsImNvbnRleHQiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJfcmVxdWVzdCRxdWVyeSIsIl9yZXF1ZXN0JHF1ZXJ5MiIsInVwZGF0ZXMiLCJnZXRVcGRhdGVzIiwib2siLCJib2R5IiwiZXJyb3IiLCJmaW5hbEVycm9yIiwiRXJyb3IiLCJjdXN0b21FcnJvciIsInN0YXR1c0NvZGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZ2V0LXVwZGF0ZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVJvdXRlciB9IGZyb20gJ29wZW5zZWFyY2gtZGFzaGJvYXJkcy9zZXJ2ZXInO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnQG9zZC9jb25maWctc2NoZW1hJztcbmltcG9ydCB7IHJvdXRlcyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0VXBkYXRlcyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3VwZGF0ZXMnO1xuXG5leHBvcnQgY29uc3QgZ2V0VXBkYXRlc1JvdXRlID0gKHJvdXRlcjogSVJvdXRlcikgPT4ge1xuICByb3V0ZXIuZ2V0KFxuICAgIHtcbiAgICAgIHBhdGg6IHJvdXRlcy5jaGVja1VwZGF0ZXMsXG4gICAgICB2YWxpZGF0ZToge1xuICAgICAgICBxdWVyeTogc2NoZW1hLm9iamVjdCh7XG4gICAgICAgICAgcXVlcnlfYXBpOiBzY2hlbWEubWF5YmUoc2NoZW1hLnN0cmluZygpKSxcbiAgICAgICAgICBmb3JjZV9xdWVyeTogc2NoZW1hLm1heWJlKHNjaGVtYS5zdHJpbmcoKSksXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGFzeW5jIChjb250ZXh0LCByZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXBkYXRlcyA9IGF3YWl0IGdldFVwZGF0ZXMoXG4gICAgICAgICAgcmVxdWVzdC5xdWVyeT8ucXVlcnlfYXBpID09PSAndHJ1ZScsXG4gICAgICAgICAgcmVxdWVzdC5xdWVyeT8uZm9yY2VfcXVlcnkgPT09ICd0cnVlJyxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKHtcbiAgICAgICAgICBib2R5OiB1cGRhdGVzLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsRXJyb3IgPVxuICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgICAgID8gZXJyb3JcbiAgICAgICAgICAgIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBuZXcgRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICA6IG5ldyBFcnJvcihgRXJyb3IgdHJ5aW5nIHRvIGdldCBhdmFpbGFibGUgdXBkYXRlc2ApO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZS5jdXN0b21FcnJvcih7XG4gICAgICAgICAgc3RhdHVzQ29kZTogNTAzLFxuICAgICAgICAgIGJvZHk6IGZpbmFsRXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFFTyxNQUFNRyxlQUFlLEdBQUlDLE1BQWUsSUFBSztFQUNsREEsTUFBTSxDQUFDQyxHQUFHLENBQ1I7SUFDRUMsSUFBSSxFQUFFQyxpQkFBTSxDQUFDQyxZQUFZO0lBQ3pCQyxRQUFRLEVBQUU7TUFDUkMsS0FBSyxFQUFFQyxvQkFBTSxDQUFDQyxNQUFNLENBQUM7UUFDbkJDLFNBQVMsRUFBRUYsb0JBQU0sQ0FBQ0csS0FBSyxDQUFDSCxvQkFBTSxDQUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3hDQyxXQUFXLEVBQUVMLG9CQUFNLENBQUNHLEtBQUssQ0FBQ0gsb0JBQU0sQ0FBQ0ksTUFBTSxDQUFDLENBQUM7TUFDM0MsQ0FBQztJQUNIO0VBQ0YsQ0FBQyxFQUNELE9BQU9FLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEtBQUs7SUFDcEMsSUFBSTtNQUFBLElBQUFDLGNBQUEsRUFBQUMsZUFBQTtNQUNGLE1BQU1DLE9BQU8sR0FBRyxNQUFNLElBQUFDLG1CQUFVLEVBQzlCLEVBQUFILGNBQUEsR0FBQUYsT0FBTyxDQUFDUixLQUFLLGNBQUFVLGNBQUEsdUJBQWJBLGNBQUEsQ0FBZVAsU0FBUyxNQUFLLE1BQU0sRUFDbkMsRUFBQVEsZUFBQSxHQUFBSCxPQUFPLENBQUNSLEtBQUssY0FBQVcsZUFBQSx1QkFBYkEsZUFBQSxDQUFlTCxXQUFXLE1BQUssTUFDakMsQ0FBQztNQUNELE9BQU9HLFFBQVEsQ0FBQ0ssRUFBRSxDQUFDO1FBQ2pCQyxJQUFJLEVBQUVIO01BQ1IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLE9BQU9JLEtBQUssRUFBRTtNQUNkLE1BQU1DLFVBQVUsR0FDZEQsS0FBSyxZQUFZRSxLQUFLLEdBQ2xCRixLQUFLLEdBQ0wsT0FBT0EsS0FBSyxLQUFLLFFBQVEsR0FDekIsSUFBSUUsS0FBSyxDQUFDRixLQUFLLENBQUMsR0FDaEIsSUFBSUUsS0FBSyxDQUFFLHVDQUFzQyxDQUFDO01BRXhELE9BQU9ULFFBQVEsQ0FBQ1UsV0FBVyxDQUFDO1FBQzFCQyxVQUFVLEVBQUUsR0FBRztRQUNmTCxJQUFJLEVBQUVFO01BQ1IsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUNGLENBQUM7QUFDSCxDQUFDO0FBQUNJLE9BQUEsQ0FBQTVCLGVBQUEsR0FBQUEsZUFBQSJ9