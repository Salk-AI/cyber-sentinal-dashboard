"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateUserPreferencesRoutes = void 0;
var _configSchema = require("@osd/config-schema");
var _constants = require("../../../common/constants");
var _userPreferences = require("../../services/user-preferences");
const updateUserPreferencesRoutes = router => {
  router.patch({
    path: _constants.routes.userPreferences,
    validate: {
      body: _configSchema.schema.object({
        last_dismissed_updates: _configSchema.schema.maybe(_configSchema.schema.arrayOf(_configSchema.schema.object({
          api_id: _configSchema.schema.string(),
          last_major: _configSchema.schema.maybe(_configSchema.schema.string()),
          last_minor: _configSchema.schema.maybe(_configSchema.schema.string()),
          last_patch: _configSchema.schema.maybe(_configSchema.schema.string())
        }))),
        hide_update_notifications: _configSchema.schema.maybe(_configSchema.schema.boolean())
      })
    },
    options: {
      body: {
        parse: true
      }
    }
  }, async (context, request, response) => {
    try {
      const user = await context['wazuh_check_updates'].security.getCurrentUser(request, context);
      if (!(user !== null && user !== void 0 && user.username)) {
        return response.customError({
          statusCode: 503,
          body: new Error('Error trying to get username')
        });
      }
      const userPreferences = await (0, _userPreferences.updateUserPreferences)(user.username, request.body);
      return response.ok({
        body: userPreferences
      });
    } catch (error) {
      const finalError = error instanceof Error ? error : typeof error === 'string' ? new Error(error) : new Error('Error trying to update user preferences');
      return response.customError({
        statusCode: 503,
        body: finalError
      });
    }
  });
};
exports.updateUserPreferencesRoutes = updateUserPreferencesRoutes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnU2NoZW1hIiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJfdXNlclByZWZlcmVuY2VzIiwidXBkYXRlVXNlclByZWZlcmVuY2VzUm91dGVzIiwicm91dGVyIiwicGF0Y2giLCJwYXRoIiwicm91dGVzIiwidXNlclByZWZlcmVuY2VzIiwidmFsaWRhdGUiLCJib2R5Iiwic2NoZW1hIiwib2JqZWN0IiwibGFzdF9kaXNtaXNzZWRfdXBkYXRlcyIsIm1heWJlIiwiYXJyYXlPZiIsImFwaV9pZCIsInN0cmluZyIsImxhc3RfbWFqb3IiLCJsYXN0X21pbm9yIiwibGFzdF9wYXRjaCIsImhpZGVfdXBkYXRlX25vdGlmaWNhdGlvbnMiLCJib29sZWFuIiwib3B0aW9ucyIsInBhcnNlIiwiY29udGV4dCIsInJlcXVlc3QiLCJyZXNwb25zZSIsInVzZXIiLCJzZWN1cml0eSIsImdldEN1cnJlbnRVc2VyIiwidXNlcm5hbWUiLCJjdXN0b21FcnJvciIsInN0YXR1c0NvZGUiLCJFcnJvciIsInVwZGF0ZVVzZXJQcmVmZXJlbmNlcyIsIm9rIiwiZXJyb3IiLCJmaW5hbEVycm9yIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVwZGF0ZS11c2VyLXByZWZlcmVuY2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElSb3V0ZXIgfSBmcm9tICdvcGVuc2VhcmNoLWRhc2hib2FyZHMvc2VydmVyJztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJ0Bvc2QvY29uZmlnLXNjaGVtYSc7XG5pbXBvcnQgeyByb3V0ZXMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IHVwZGF0ZVVzZXJQcmVmZXJlbmNlcyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3VzZXItcHJlZmVyZW5jZXMnO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlVXNlclByZWZlcmVuY2VzUm91dGVzID0gKHJvdXRlcjogSVJvdXRlcikgPT4ge1xuICByb3V0ZXIucGF0Y2goXG4gICAge1xuICAgICAgcGF0aDogcm91dGVzLnVzZXJQcmVmZXJlbmNlcyxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIGJvZHk6IHNjaGVtYS5vYmplY3Qoe1xuICAgICAgICAgIGxhc3RfZGlzbWlzc2VkX3VwZGF0ZXM6IHNjaGVtYS5tYXliZShcbiAgICAgICAgICAgIHNjaGVtYS5hcnJheU9mKFxuICAgICAgICAgICAgICBzY2hlbWEub2JqZWN0KHtcbiAgICAgICAgICAgICAgICBhcGlfaWQ6IHNjaGVtYS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsYXN0X21ham9yOiBzY2hlbWEubWF5YmUoc2NoZW1hLnN0cmluZygpKSxcbiAgICAgICAgICAgICAgICBsYXN0X21pbm9yOiBzY2hlbWEubWF5YmUoc2NoZW1hLnN0cmluZygpKSxcbiAgICAgICAgICAgICAgICBsYXN0X3BhdGNoOiBzY2hlbWEubWF5YmUoc2NoZW1hLnN0cmluZygpKSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIGhpZGVfdXBkYXRlX25vdGlmaWNhdGlvbnM6IHNjaGVtYS5tYXliZShzY2hlbWEuYm9vbGVhbigpKSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgcGFyc2U6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgYXN5bmMgKGNvbnRleHQsIHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgY29udGV4dFsnd2F6dWhfY2hlY2tfdXBkYXRlcyddLnNlY3VyaXR5LmdldEN1cnJlbnRVc2VyKHJlcXVlc3QsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmICghdXNlcj8udXNlcm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuY3VzdG9tRXJyb3Ioe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAzLFxuICAgICAgICAgICAgYm9keTogbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gZ2V0IHVzZXJuYW1lJyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VyUHJlZmVyZW5jZXMgPSBhd2FpdCB1cGRhdGVVc2VyUHJlZmVyZW5jZXModXNlci51c2VybmFtZSwgcmVxdWVzdC5ib2R5KTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soe1xuICAgICAgICAgIGJvZHk6IHVzZXJQcmVmZXJlbmNlcyxcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBmaW5hbEVycm9yID1cbiAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgICAgICA/IGVycm9yXG4gICAgICAgICAgICA6IHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gbmV3IEVycm9yKGVycm9yKVxuICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byB1cGRhdGUgdXNlciBwcmVmZXJlbmNlcycpO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZS5jdXN0b21FcnJvcih7XG4gICAgICAgICAgc3RhdHVzQ29kZTogNTAzLFxuICAgICAgICAgIGJvZHk6IGZpbmFsRXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGdCQUFBLEdBQUFGLE9BQUE7QUFFTyxNQUFNRywyQkFBMkIsR0FBSUMsTUFBZSxJQUFLO0VBQzlEQSxNQUFNLENBQUNDLEtBQUssQ0FDVjtJQUNFQyxJQUFJLEVBQUVDLGlCQUFNLENBQUNDLGVBQWU7SUFDNUJDLFFBQVEsRUFBRTtNQUNSQyxJQUFJLEVBQUVDLG9CQUFNLENBQUNDLE1BQU0sQ0FBQztRQUNsQkMsc0JBQXNCLEVBQUVGLG9CQUFNLENBQUNHLEtBQUssQ0FDbENILG9CQUFNLENBQUNJLE9BQU8sQ0FDWkosb0JBQU0sQ0FBQ0MsTUFBTSxDQUFDO1VBQ1pJLE1BQU0sRUFBRUwsb0JBQU0sQ0FBQ00sTUFBTSxDQUFDLENBQUM7VUFDdkJDLFVBQVUsRUFBRVAsb0JBQU0sQ0FBQ0csS0FBSyxDQUFDSCxvQkFBTSxDQUFDTSxNQUFNLENBQUMsQ0FBQyxDQUFDO1VBQ3pDRSxVQUFVLEVBQUVSLG9CQUFNLENBQUNHLEtBQUssQ0FBQ0gsb0JBQU0sQ0FBQ00sTUFBTSxDQUFDLENBQUMsQ0FBQztVQUN6Q0csVUFBVSxFQUFFVCxvQkFBTSxDQUFDRyxLQUFLLENBQUNILG9CQUFNLENBQUNNLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FDSCxDQUNGLENBQUM7UUFDREkseUJBQXlCLEVBQUVWLG9CQUFNLENBQUNHLEtBQUssQ0FBQ0gsb0JBQU0sQ0FBQ1csT0FBTyxDQUFDLENBQUM7TUFDMUQsQ0FBQztJQUNILENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BiLElBQUksRUFBRTtRQUNKYyxLQUFLLEVBQUU7TUFDVDtJQUNGO0VBQ0YsQ0FBQyxFQUNELE9BQU9DLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEtBQUs7SUFDcEMsSUFBSTtNQUNGLE1BQU1DLElBQUksR0FBRyxNQUFNSCxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQ0ksUUFBUSxDQUFDQyxjQUFjLENBQUNKLE9BQU8sRUFBRUQsT0FBTyxDQUFDO01BRTNGLElBQUksRUFBQ0csSUFBSSxhQUFKQSxJQUFJLGVBQUpBLElBQUksQ0FBRUcsUUFBUSxHQUFFO1FBQ25CLE9BQU9KLFFBQVEsQ0FBQ0ssV0FBVyxDQUFDO1VBQzFCQyxVQUFVLEVBQUUsR0FBRztVQUNmdkIsSUFBSSxFQUFFLElBQUl3QixLQUFLLENBQUMsOEJBQThCO1FBQ2hELENBQUMsQ0FBQztNQUNKO01BRUEsTUFBTTFCLGVBQWUsR0FBRyxNQUFNLElBQUEyQixzQ0FBcUIsRUFBQ1AsSUFBSSxDQUFDRyxRQUFRLEVBQUVMLE9BQU8sQ0FBQ2hCLElBQUksQ0FBQztNQUVoRixPQUFPaUIsUUFBUSxDQUFDUyxFQUFFLENBQUM7UUFDakIxQixJQUFJLEVBQUVGO01BQ1IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLE9BQU82QixLQUFLLEVBQUU7TUFDZCxNQUFNQyxVQUFVLEdBQ2RELEtBQUssWUFBWUgsS0FBSyxHQUNsQkcsS0FBSyxHQUNMLE9BQU9BLEtBQUssS0FBSyxRQUFRLEdBQ3pCLElBQUlILEtBQUssQ0FBQ0csS0FBSyxDQUFDLEdBQ2hCLElBQUlILEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQztNQUUxRCxPQUFPUCxRQUFRLENBQUNLLFdBQVcsQ0FBQztRQUMxQkMsVUFBVSxFQUFFLEdBQUc7UUFDZnZCLElBQUksRUFBRTRCO01BQ1IsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUNGLENBQUM7QUFDSCxDQUFDO0FBQUNDLE9BQUEsQ0FBQXBDLDJCQUFBLEdBQUFBLDJCQUFBIn0=