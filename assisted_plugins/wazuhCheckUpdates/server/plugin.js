"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhCheckUpdatesPlugin = void 0;
var _routes = require("./routes");
var _types = require("./services/saved-object/types");
var _pluginServices = require("./plugin-services");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class WazuhCheckUpdatesPlugin {
  constructor(initializerContext) {
    _defineProperty(this, "logger", void 0);
    this.logger = initializerContext.logger.get();
  }
  async setup(core, plugins) {
    this.logger.debug('wazuh_check_updates: Setup');
    (0, _pluginServices.setWazuhCore)(plugins.wazuhCore);
    (0, _pluginServices.setWazuhCheckUpdatesServices)({
      logger: this.logger
    });
    core.http.registerRouteHandlerContext('wazuh_check_updates', () => {
      return {
        logger: this.logger,
        security: plugins.wazuhCore.dashboardSecurity
      };
    });
    const router = core.http.createRouter();

    // Register saved objects types
    core.savedObjects.registerType(_types.availableUpdatesObject);
    core.savedObjects.registerType(_types.userPreferencesObject);

    // Register server side APIs
    (0, _routes.defineRoutes)(router);
    return {};
  }
  start(core, plugins) {
    this.logger.debug('wazuhCheckUpdates: Started');
    const internalSavedObjectsClient = core.savedObjects.createInternalRepository();
    (0, _pluginServices.setCore)(core);
    (0, _pluginServices.setInternalSavedObjectsClient)(internalSavedObjectsClient);
    return {};
  }
  stop() {}
}
exports.WazuhCheckUpdatesPlugin = WazuhCheckUpdatesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcm91dGVzIiwicmVxdWlyZSIsIl90eXBlcyIsIl9wbHVnaW5TZXJ2aWNlcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJXYXp1aENoZWNrVXBkYXRlc1BsdWdpbiIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbGl6ZXJDb250ZXh0IiwibG9nZ2VyIiwiZ2V0Iiwic2V0dXAiLCJjb3JlIiwicGx1Z2lucyIsImRlYnVnIiwic2V0V2F6dWhDb3JlIiwid2F6dWhDb3JlIiwic2V0V2F6dWhDaGVja1VwZGF0ZXNTZXJ2aWNlcyIsImh0dHAiLCJyZWdpc3RlclJvdXRlSGFuZGxlckNvbnRleHQiLCJzZWN1cml0eSIsImRhc2hib2FyZFNlY3VyaXR5Iiwicm91dGVyIiwiY3JlYXRlUm91dGVyIiwic2F2ZWRPYmplY3RzIiwicmVnaXN0ZXJUeXBlIiwiYXZhaWxhYmxlVXBkYXRlc09iamVjdCIsInVzZXJQcmVmZXJlbmNlc09iamVjdCIsImRlZmluZVJvdXRlcyIsInN0YXJ0IiwiaW50ZXJuYWxTYXZlZE9iamVjdHNDbGllbnQiLCJjcmVhdGVJbnRlcm5hbFJlcG9zaXRvcnkiLCJzZXRDb3JlIiwic2V0SW50ZXJuYWxTYXZlZE9iamVjdHNDbGllbnQiLCJzdG9wIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInBsdWdpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBQbHVnaW5Jbml0aWFsaXplckNvbnRleHQsXG4gIENvcmVTZXR1cCxcbiAgQ29yZVN0YXJ0LFxuICBQbHVnaW4sXG4gIExvZ2dlcixcbn0gZnJvbSAnb3BlbnNlYXJjaC1kYXNoYm9hcmRzL3NlcnZlcic7XG5cbmltcG9ydCB7XG4gIFBsdWdpblNldHVwLFxuICBXYXp1aENoZWNrVXBkYXRlc1BsdWdpblNldHVwLFxuICBXYXp1aENoZWNrVXBkYXRlc1BsdWdpblN0YXJ0LFxuICBBcHBQbHVnaW5TdGFydERlcGVuZGVuY2llcyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBkZWZpbmVSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcyc7XG5pbXBvcnQge1xuICBhdmFpbGFibGVVcGRhdGVzT2JqZWN0LFxuICB1c2VyUHJlZmVyZW5jZXNPYmplY3QsXG59IGZyb20gJy4vc2VydmljZXMvc2F2ZWQtb2JqZWN0L3R5cGVzJztcbmltcG9ydCB7XG4gIHNldENvcmUsXG4gIHNldFdhenVoQ29yZSxcbiAgc2V0SW50ZXJuYWxTYXZlZE9iamVjdHNDbGllbnQsXG4gIHNldFdhenVoQ2hlY2tVcGRhdGVzU2VydmljZXMsXG59IGZyb20gJy4vcGx1Z2luLXNlcnZpY2VzJztcbmltcG9ydCB7IElTZWN1cml0eUZhY3RvcnkgfSBmcm9tICcuLi8uLi93YXp1aC1jb3JlL3NlcnZlci9zZXJ2aWNlcy9zZWN1cml0eS1mYWN0b3J5JztcblxuZGVjbGFyZSBtb2R1bGUgJ29wZW5zZWFyY2gtZGFzaGJvYXJkcy9zZXJ2ZXInIHtcbiAgaW50ZXJmYWNlIFJlcXVlc3RIYW5kbGVyQ29udGV4dCB7XG4gICAgd2F6dWhfY2hlY2tfdXBkYXRlczoge1xuICAgICAgbG9nZ2VyOiBMb2dnZXI7XG4gICAgICBzZWN1cml0eTogSVNlY3VyaXR5RmFjdG9yeTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXYXp1aENoZWNrVXBkYXRlc1BsdWdpblxuICBpbXBsZW1lbnRzIFBsdWdpbjxXYXp1aENoZWNrVXBkYXRlc1BsdWdpblNldHVwLCBXYXp1aENoZWNrVXBkYXRlc1BsdWdpblN0YXJ0Plxue1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKGluaXRpYWxpemVyQ29udGV4dDogUGx1Z2luSW5pdGlhbGl6ZXJDb250ZXh0KSB7XG4gICAgdGhpcy5sb2dnZXIgPSBpbml0aWFsaXplckNvbnRleHQubG9nZ2VyLmdldCgpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldHVwKGNvcmU6IENvcmVTZXR1cCwgcGx1Z2luczogUGx1Z2luU2V0dXApIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1Zygnd2F6dWhfY2hlY2tfdXBkYXRlczogU2V0dXAnKTtcblxuICAgIHNldFdhenVoQ29yZShwbHVnaW5zLndhenVoQ29yZSk7XG4gICAgc2V0V2F6dWhDaGVja1VwZGF0ZXNTZXJ2aWNlcyh7IGxvZ2dlcjogdGhpcy5sb2dnZXIgfSk7XG5cbiAgICBjb3JlLmh0dHAucmVnaXN0ZXJSb3V0ZUhhbmRsZXJDb250ZXh0KCd3YXp1aF9jaGVja191cGRhdGVzJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9nZ2VyOiB0aGlzLmxvZ2dlcixcbiAgICAgICAgc2VjdXJpdHk6IHBsdWdpbnMud2F6dWhDb3JlLmRhc2hib2FyZFNlY3VyaXR5LFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJvdXRlciA9IGNvcmUuaHR0cC5jcmVhdGVSb3V0ZXIoKTtcblxuICAgIC8vIFJlZ2lzdGVyIHNhdmVkIG9iamVjdHMgdHlwZXNcbiAgICBjb3JlLnNhdmVkT2JqZWN0cy5yZWdpc3RlclR5cGUoYXZhaWxhYmxlVXBkYXRlc09iamVjdCk7XG4gICAgY29yZS5zYXZlZE9iamVjdHMucmVnaXN0ZXJUeXBlKHVzZXJQcmVmZXJlbmNlc09iamVjdCk7XG5cbiAgICAvLyBSZWdpc3RlciBzZXJ2ZXIgc2lkZSBBUElzXG4gICAgZGVmaW5lUm91dGVzKHJvdXRlcik7XG5cbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoXG4gICAgY29yZTogQ29yZVN0YXJ0LFxuICAgIHBsdWdpbnM6IEFwcFBsdWdpblN0YXJ0RGVwZW5kZW5jaWVzLFxuICApOiBXYXp1aENoZWNrVXBkYXRlc1BsdWdpblN0YXJ0IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1Zygnd2F6dWhDaGVja1VwZGF0ZXM6IFN0YXJ0ZWQnKTtcblxuICAgIGNvbnN0IGludGVybmFsU2F2ZWRPYmplY3RzQ2xpZW50ID1cbiAgICAgIGNvcmUuc2F2ZWRPYmplY3RzLmNyZWF0ZUludGVybmFsUmVwb3NpdG9yeSgpO1xuICAgIHNldENvcmUoY29yZSk7XG5cbiAgICBzZXRJbnRlcm5hbFNhdmVkT2JqZWN0c0NsaWVudChpbnRlcm5hbFNhdmVkT2JqZWN0c0NsaWVudCk7XG5cbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwdWJsaWMgc3RvcCgpIHt9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQWNBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUlBLElBQUFFLGVBQUEsR0FBQUYsT0FBQTtBQUsyQixTQUFBRyxnQkFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBRCxHQUFBLElBQUFJLE1BQUEsQ0FBQUMsY0FBQSxDQUFBTCxHQUFBLEVBQUFDLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBUixHQUFBLENBQUFDLEdBQUEsSUFBQUMsS0FBQSxXQUFBRixHQUFBO0FBQUEsU0FBQUcsZUFBQU0sR0FBQSxRQUFBUixHQUFBLEdBQUFTLFlBQUEsQ0FBQUQsR0FBQSwyQkFBQVIsR0FBQSxnQkFBQUEsR0FBQSxHQUFBVSxNQUFBLENBQUFWLEdBQUE7QUFBQSxTQUFBUyxhQUFBRSxLQUFBLEVBQUFDLElBQUEsZUFBQUQsS0FBQSxpQkFBQUEsS0FBQSxrQkFBQUEsS0FBQSxNQUFBRSxJQUFBLEdBQUFGLEtBQUEsQ0FBQUcsTUFBQSxDQUFBQyxXQUFBLE9BQUFGLElBQUEsS0FBQUcsU0FBQSxRQUFBQyxHQUFBLEdBQUFKLElBQUEsQ0FBQUssSUFBQSxDQUFBUCxLQUFBLEVBQUFDLElBQUEsMkJBQUFLLEdBQUEsc0JBQUFBLEdBQUEsWUFBQUUsU0FBQSw0REFBQVAsSUFBQSxnQkFBQUYsTUFBQSxHQUFBVSxNQUFBLEVBQUFULEtBQUE7QUFZcEIsTUFBTVUsdUJBQXVCLENBRXBDO0VBR0VDLFdBQVdBLENBQUNDLGtCQUE0QyxFQUFFO0lBQUF6QixlQUFBO0lBQ3hELElBQUksQ0FBQzBCLE1BQU0sR0FBR0Qsa0JBQWtCLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUM7RUFDL0M7RUFFQSxNQUFhQyxLQUFLQSxDQUFDQyxJQUFlLEVBQUVDLE9BQW9CLEVBQUU7SUFDeEQsSUFBSSxDQUFDSixNQUFNLENBQUNLLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQztJQUUvQyxJQUFBQyw0QkFBWSxFQUFDRixPQUFPLENBQUNHLFNBQVMsQ0FBQztJQUMvQixJQUFBQyw0Q0FBNEIsRUFBQztNQUFFUixNQUFNLEVBQUUsSUFBSSxDQUFDQTtJQUFPLENBQUMsQ0FBQztJQUVyREcsSUFBSSxDQUFDTSxJQUFJLENBQUNDLDJCQUEyQixDQUFDLHFCQUFxQixFQUFFLE1BQU07TUFDakUsT0FBTztRQUNMVixNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNO1FBQ25CVyxRQUFRLEVBQUVQLE9BQU8sQ0FBQ0csU0FBUyxDQUFDSztNQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTUMsTUFBTSxHQUFHVixJQUFJLENBQUNNLElBQUksQ0FBQ0ssWUFBWSxDQUFDLENBQUM7O0lBRXZDO0lBQ0FYLElBQUksQ0FBQ1ksWUFBWSxDQUFDQyxZQUFZLENBQUNDLDZCQUFzQixDQUFDO0lBQ3REZCxJQUFJLENBQUNZLFlBQVksQ0FBQ0MsWUFBWSxDQUFDRSw0QkFBcUIsQ0FBQzs7SUFFckQ7SUFDQSxJQUFBQyxvQkFBWSxFQUFDTixNQUFNLENBQUM7SUFFcEIsT0FBTyxDQUFDLENBQUM7RUFDWDtFQUVPTyxLQUFLQSxDQUNWakIsSUFBZSxFQUNmQyxPQUFtQyxFQUNMO0lBQzlCLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxLQUFLLENBQUMsNEJBQTRCLENBQUM7SUFFL0MsTUFBTWdCLDBCQUEwQixHQUM5QmxCLElBQUksQ0FBQ1ksWUFBWSxDQUFDTyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzlDLElBQUFDLHVCQUFPLEVBQUNwQixJQUFJLENBQUM7SUFFYixJQUFBcUIsNkNBQTZCLEVBQUNILDBCQUEwQixDQUFDO0lBRXpELE9BQU8sQ0FBQyxDQUFDO0VBQ1g7RUFFT0ksSUFBSUEsQ0FBQSxFQUFHLENBQUM7QUFDakI7QUFBQ0MsT0FBQSxDQUFBN0IsdUJBQUEsR0FBQUEsdUJBQUEifQ==