"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backendToUiReportsList = exports.backendToUiReportDefinitionsList = exports.backendToUiReportDefinition = exports.backendToUiReport = void 0;
var _model = require("../../../model");
var _backendModel = require("../../../model/backendModel");
var _constants = require("../constants");
var _moment = _interopRequireDefault(require("moment"));
var _url = require("url");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

const backendToUiReport = (backendReportInstance, serverBasePath) => {
  const {
    inContextDownloadUrlPath,
    beginTimeMs,
    endTimeMs,
    tenant,
    status,
    lastUpdatedTimeMs: reportLastUpdatedTimeMs,
    createdTimeMs: reportCreatedTimeMs,
    reportDefinitionDetails: backendReportDefinitionDetails
  } = backendReportInstance;
  const {
    reportDefinition: {
      source: {
        type: sourceType,
        id: sourceId
      },
      delivery
    }
  } = backendReportDefinitionDetails;
  const baseUrl = getBaseUrl(sourceType, sourceId);
  let report = {
    // inContextDownloadUrlPath may not exist for report instance created from scheduled job
    query_url: inContextDownloadUrlPath || getUiQueryUrl(baseUrl, beginTimeMs, endTimeMs, tenant),
    time_from: beginTimeMs,
    time_to: endTimeMs,
    last_updated: reportLastUpdatedTimeMs,
    time_created: reportCreatedTimeMs,
    state: getUiReportState(status, delivery),
    report_definition: backendToUiReportDefinition(backendReportDefinitionDetails, serverBasePath)
  };

  // Add severbasePath back to query_url
  report.query_url = serverBasePath + report.query_url;
  return report;
};
exports.backendToUiReport = backendToUiReport;
const backendToUiReportsList = (backendReportsList, serverBasePath) => {
  const res = backendReportsList.map(backendReport => {
    return {
      _id: backendReport.id,
      _source: backendToUiReport(backendReport, serverBasePath)
    };
  });
  return res;
};
exports.backendToUiReportsList = backendToUiReportsList;
const backendToUiReportDefinition = (backendReportDefinitionDetails, serverBasePath) => {
  const {
    lastUpdatedTimeMs,
    createdTimeMs,
    reportDefinition: {
      name,
      isEnabled,
      source: {
        type: sourceType,
        description,
        id: sourceId,
        origin
      },
      format: {
        fileFormat,
        duration,
        header,
        footer,
        limit
      },
      trigger: {
        triggerType,
        schedule
      },
      delivery
    }
  } = backendReportDefinitionDetails;
  const baseUrl = getBaseUrl(sourceType, sourceId);
  const reportSource = getUiReportSource(sourceType);
  let uiReportDefinition = {
    report_params: {
      report_name: name,
      report_source: reportSource,
      description: description,
      core_params: reportSource === _constants.REPORT_TYPE.savedSearch ? getDataReportCoreParams(limit, sourceId, fileFormat, duration, baseUrl, origin) : getVisualReportCoreParams(fileFormat, header, footer, duration, baseUrl, origin)
    },
    trigger: getUiTriggerParams(triggerType, schedule, createdTimeMs, isEnabled),
    delivery: getUiDeliveryParams(delivery),
    //TODO:
    time_created: createdTimeMs,
    last_updated: lastUpdatedTimeMs,
    status: getUiReportDefinitionStatus(isEnabled)
  };
  // validate to assign default values to some fields for UI model
  uiReportDefinition = _model.reportDefinitionSchema.validate(uiReportDefinition);
  uiReportDefinition.report_params.core_params.base_url = serverBasePath + uiReportDefinition.report_params.core_params.base_url;
  return uiReportDefinition;
};
exports.backendToUiReportDefinition = backendToUiReportDefinition;
const backendToUiReportDefinitionsList = (backendReportDefinitionDetailsList, serverBasePath) => {
  const res = backendReportDefinitionDetailsList.map(backendReportDefinitionDetails => {
    return {
      _id: backendReportDefinitionDetails.id,
      _source: {
        // TODO: this property can be removed, but need UI changes as well
        report_definition: backendToUiReportDefinition(backendReportDefinitionDetails, serverBasePath)
      }
    };
  });
  return res;
};
exports.backendToUiReportDefinitionsList = backendToUiReportDefinitionsList;
const getVisualReportCoreParams = (fileFormat, header = '', footer = '', duration, baseUrl, origin) => {
  let res = {
    base_url: baseUrl,
    report_format: getUiReportFormat(fileFormat),
    header: header,
    footer: footer,
    time_duration: duration,
    origin: origin
  };
  return res;
};

// queryUrl = baseUrl + time range
const getUiQueryUrl = (baseUrl, beginTimeMs, endTimeMs, tenant) => {
  const timeFrom = (0, _moment.default)(beginTimeMs).toISOString();
  const timeTo = (0, _moment.default)(endTimeMs).toISOString();
  let queryUrl = `${baseUrl}?_g=(time:(from:'${timeFrom}',to:'${timeTo}'))`;
  if (tenant !== undefined) {
    if (tenant === '') {
      tenant = 'global';
    } else if (tenant === '__user__') {
      tenant = 'private';
    }
    queryUrl = addTenantToURL(queryUrl, tenant);
  }
  return queryUrl;
};
const getBaseUrl = (sourceType, sourceId) => {
  //TODO: AES domain has different prefix, need figure out a general solution
  const baseUrl = `${_backendModel.URL_PREFIX_DICT[sourceType]}${sourceId}`;
  return baseUrl;
};
const getDataReportCoreParams = (limit = _constants.DEFAULT_MAX_SIZE, sourceId, fileFormat, duration, baseUrl, origin) => {
  let res = {
    base_url: baseUrl,
    report_format: getUiReportFormat(fileFormat),
    limit: limit,
    time_duration: duration,
    saved_search_id: sourceId,
    origin: origin
  };
  return res;
};
const getUiScheduleParams = (schedule, createdTimeMs, isEnabled) => {
  let res = {
    trigger_params: {
      enabled_time: createdTimeMs,
      enabled: isEnabled,
      schedule_type: schedule && 'cron' in schedule ? _constants.SCHEDULE_TYPE.cron : _constants.SCHEDULE_TYPE.recurring,
      schedule: schedule
    }
  };
  return res;
};
const getUiTriggerType = backendField => {
  let res;
  for (let [ui, backendFieldList] of Object.entries(_backendModel.TRIGGER_TYPE_DICT)) {
    for (let item of backendFieldList) {
      if (item === backendField) {
        res = ui;
      }
    }
  }
  return res;
};
const getUiReportFormat = backendField => {
  let res;
  for (let [ui, backend] of Object.entries(_backendModel.REPORT_FORMAT_DICT)) {
    if (backend === backendField) {
      res = ui;
    }
  }
  return res;
};
const getUiReportState = (status, delivery) => {
  let res;
  for (let [ui, backend] of Object.entries(_backendModel.REPORT_STATE_DICT)) {
    if (backend === status) {
      // distinguish "shared" and "created"
      if (status === _backendModel.BACKEND_REPORT_STATE.success && delivery) {
        res = _constants.REPORT_STATE.shared;
      } else {
        res = ui;
      }
    } else if (status === _backendModel.BACKEND_REPORT_STATE.scheduled) {
      // corner case
      res = _constants.REPORT_STATE.pending;
    }
  }
  return res;
};
const getUiReportSource = type => {
  let res;
  for (let [ui, backend] of Object.entries(_backendModel.REPORT_SOURCE_DICT)) {
    if (backend === type) {
      res = ui;
    }
  }
  return res;
};
const getUiReportDefinitionStatus = isEnabled => {
  return isEnabled ? _constants.REPORT_DEFINITION_STATUS.active : _constants.REPORT_DEFINITION_STATUS.disabled;
};
const getUiTriggerParams = (triggerType, schedule, createdTimeMs, isEnabled) => {
  let res = {
    trigger_type: getUiTriggerType(triggerType),
    ...(getUiTriggerType(triggerType) === _constants.TRIGGER_TYPE.schedule && getUiScheduleParams(schedule, createdTimeMs, isEnabled))
  };
  return res;
};

// Delivery
const getUiDeliveryParams = delivery => {
  const opensearchDashboardsUserDeliveryParams = {
    configIds: [],
    title: '',
    textDescription: '',
    htmlDescription: ''
  };
  let params;
  if (delivery) {
    const {
      ...rest
    } = delivery;
    params = {
      ...rest
    };
  } else {
    params = opensearchDashboardsUserDeliveryParams;
  }
  return params;
};

// helper function to add tenant info to url(if tenant is available)
const addTenantToURL = (url, userRequestedTenant) => {
  // build fake url from relative url
  const fakeUrl = `http://opensearch.com${url}`;
  const tenantKey = 'security_tenant';
  const tenantKeyAndValue = tenantKey + '=' + encodeURIComponent(userRequestedTenant);
  const {
    pathname,
    search
  } = (0, _url.parse)(fakeUrl);
  const queryDelimiter = !search ? '?' : '&';

  // The url parser returns null if the search is empty. Change that to an empty
  // string so that we can use it to build the values later
  if (search && search.toLowerCase().indexOf(tenantKey) > -1) {
    // If we for some reason already have a tenant in the URL we skip any updates
    return url;
  }

  // A helper for finding the part in the string that we want to extend/replace
  const valueToReplace = pathname + (search || '');
  const replaceWith = valueToReplace + queryDelimiter + tenantKeyAndValue;
  return url.replace(valueToReplace, replaceWith);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,