"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExcelBuilder = void 0;
var _exceljs = _interopRequireDefault(require("exceljs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ExcelBuilder {
  constructor() {
    _defineProperty(this, "workbook", void 0);
    _defineProperty(this, "worksheet", void 0);
    _defineProperty(this, "headerRowsCount", void 0);
    this.workbook = new _exceljs.default.Workbook();
    this.worksheet = this.workbook.addWorksheet('Sheet1');
    this.headerRowsCount = 0;
  }
  addHeaders(json) {
    if (!json || json.length <= 0) {
      return this;
    }
    const headerKeys = this.getHeaderKeys(json);
    this.worksheet.columns = Object.keys(headerKeys).map(key => {
      return {
        header: [key],
        key
      };
    });
    this.headerRowsCount++;
    return this;
  }
  addRows(json) {
    if (!json || json.length <= 0) {
      return this;
    }
    for (const data of json) {
      this.worksheet.addRow(data);
    }
    return this;
  }
  updateColumnWidths() {
    for (const column of this.worksheet.columns) {
      if (!column.eachCell) {
        continue;
      }
      let maxLength = 0;
      let count = 1;
      column.eachCell({
        includeEmpty: true
      }, cell => {
        if (count > this.headerRowsCount) {
          const cellLength = cell.value ? cell.value.toString().length : 0;
          if (cellLength > maxLength) {
            maxLength = cellLength;
          }
        }
        count++;
      });
      column.width = this.getColumnWidth(maxLength);
    }
    return this;
  }
  applyFreeze() {
    this.worksheet.views = [{
      state: 'frozen',
      ySplit: this.headerRowsCount
    }];
    return this;
  }
  applyHeaderStyles() {
    for (let i = 1; i <= this.headerRowsCount; i++) {
      const row = this.worksheet.getRow(i);
      row.height = this.worksheet.properties.defaultRowHeight * 2;
      row.font = {
        bold: true
      };
      row.alignment = {
        horizontal: 'left',
        vertical: 'top',
        wrapText: true
      };
    }
    return this;
  }
  applyAutoFilter() {
    const row = this.worksheet.getRow(this.headerRowsCount);
    const firstCell = row.getCell(1);
    let lastCell = firstCell;
    row.eachCell({
      includeEmpty: true
    }, function (cell) {
      lastCell = cell;
    });
    this.worksheet.autoFilter = {
      from: firstCell.$col$row,
      to: lastCell.$col$row
    };
    return this;
  }
  async getWorkbookAsBase64() {
    const buffer = await this.workbook.xlsx.writeBuffer();
    const base64 = buffer.toString('base64');
    return base64;
  }
  getColumnWidth(length) {
    if (length <= 13) {
      return 15;
    }
    if (length <= 18) {
      return 20;
    }
    return 25;
  }
  getHeaderKeys(json) {
    const headerKeys = {};
    for (const data of json) {
      for (const key of Object.keys(data)) {
        if (!headerKeys[key]) {
          headerKeys[key] = true;
        }
      }
    }
    return headerKeys;
  }
}
exports.ExcelBuilder = ExcelBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,