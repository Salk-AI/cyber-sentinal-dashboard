"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _common = require("../../common");
var _helpers = require("./utils/helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Tesseract.js by default uses CDN to host resources needed to spawn workers
 * (https://github.com/naptha/tesseract.js/blob/028a44f/docs/local-installation.md).
 * OSD does not allow the CDN scripts unless user defines `csp.rules` in
 * `opensearch_dashboards.yml` as `"script-src 'unsafe-eval' 'self'
 * https://unpkg.com https://tessdata.projectnaptha.com"`.
 *
 * These routes are used to mimic the CDN. Currently only english traineddata is
 * included and supported.
 */
function _default(router) {
  router.get({
    path: `${_common.API_PREFIX}/tesseract.js/dist/worker.min.js`,
    validate: false
  }, async (context, request, response) => {
    //@ts-ignore
    const logger = context.reporting_plugin.logger;
    try {
      const filePath = _path.default.join(__dirname, '..', '..', 'node_modules', 'tesseract.js', 'dist', 'worker.min.js');
      const fileContent = await _fs.default.promises.readFile(filePath).then(file => file.toString());
      return response.custom({
        body: fileContent,
        headers: {
          'Content-Type': 'application/javascript'
        },
        statusCode: 200
      });
    } catch (error) {
      logger.error(`failed during get tesseract.js worker file: ${error}`);
      return (0, _helpers.errorResponse)(response, error);
    }
  });
  router.get({
    path: `${_common.API_PREFIX}/tesseract.js-core/tesseract-core.wasm.js`,
    validate: false
  }, async (context, request, response) => {
    //@ts-ignore
    const logger = context.reporting_plugin.logger;
    try {
      const filePath = _path.default.join(__dirname, '..', '..', 'node_modules', 'tesseract.js-core', 'tesseract-core.wasm.js');
      const fileContent = await _fs.default.promises.readFile(filePath).then(file => file.toString());
      return response.custom({
        body: fileContent,
        headers: {
          'Content-Type': 'application/javascript'
        },
        statusCode: 200
      });
    } catch (error) {
      logger.error(`failed during get tesseract.js-core wasm file: ${error}`);
      return (0, _helpers.errorResponse)(response, error);
    }
  });
  router.get({
    path: `${_common.API_PREFIX}/tesseract-lang-data/eng.traineddata.gz`,
    validate: false
  }, async (context, request, response) => {
    //@ts-ignore
    const logger = context.reporting_plugin.logger;
    try {
      const filePath = _path.default.join(__dirname, '..', '..', 'common', 'tesseract', 'eng.traineddata.gz');
      const file = await _fs.default.promises.readFile(filePath);
      return response.custom({
        body: file,
        headers: {
          'Content-Type': 'application/gzip'
        },
        statusCode: 200
      });
    } catch (error) {
      logger.error(`failed during get tesseract.js eng.traineddata file: ${error}`);
      return (0, _helpers.errorResponse)(response, error);
    }
  });
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,