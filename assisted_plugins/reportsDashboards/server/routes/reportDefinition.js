"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _configSchema = require("@osd/config-schema");
var _common = require("../../common");
var _helpers = require("./utils/helpers");
var _createReportDefinition = require("./lib/createReportDefinition");
var _backendToUi = require("./utils/converters/backendToUi");
var _updateReportDefinition = require("./lib/updateReportDefinition");
var _constants = require("./utils/constants");
var _metricHelper = require("./utils/metricHelper");
var _validationHelper = require("../../server/utils/validationHelper");
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

function _default(router, config) {
  const protocol = config.get('osd_server', 'protocol');
  const hostname = config.get('osd_server', 'hostname');
  const port = config.get('osd_server', 'port');
  const basePath = config.osdConfig.get('server', 'basePath');

  // Create report Definition
  router.post({
    path: `${_common.API_PREFIX}/reportDefinition`,
    validate: {
      body: _configSchema.schema.any()
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report_definition', 'create', 'count');
    let reportDefinition = request.body;
    //@ts-ignore
    const logger = context.reporting_plugin.logger;
    // input validation
    try {
      reportDefinition.report_params.core_params.origin = `${protocol}://${hostname}:${port}${basePath}`;
      reportDefinition = await (0, _validationHelper.validateReportDefinition)(context.core.opensearch.legacy.client, reportDefinition, basePath);
    } catch (error) {
      logger.error(`Failed input validation for create report definition ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'create', 'user_error');
      return response.badRequest({
        body: error
      });
    }

    // save metadata
    try {
      const res = await (0, _createReportDefinition.createReportDefinition)(request, context, reportDefinition);
      return response.ok({
        body: {
          state: 'Report definition created',
          scheduler_response: res
        }
      });
    } catch (error) {
      logger.error(`Failed to create report definition: ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'create', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });

  // Update report definition by id
  router.put({
    path: `${_common.API_PREFIX}/reportDefinitions/{reportDefinitionId}`,
    validate: {
      body: _configSchema.schema.any(),
      params: _configSchema.schema.object({
        reportDefinitionId: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report_definition', 'update', 'count');
    let reportDefinition = request.body;
    //@ts-ignore
    const logger = context.reporting_plugin.logger;
    // input validation
    try {
      reportDefinition.report_params.core_params.origin = request.headers.origin;
      reportDefinition = await (0, _validationHelper.validateReportDefinition)(context.core.opensearch.legacy.client, reportDefinition, basePath);
    } catch (error) {
      logger.error(`Failed input validation for update report definition ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'update', 'user_error');
      return response.badRequest({
        body: error
      });
    }
    // Update report definition metadata
    try {
      const opensearchResp = await (0, _updateReportDefinition.updateReportDefinition)(request, context, reportDefinition);
      return response.ok({
        body: {
          state: 'Report definition updated',
          scheduler_response: opensearchResp
        }
      });
    } catch (error) {
      logger.error(`Failed to update report definition: ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'update', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });

  // get all report definitions details
  router.get({
    path: `${_common.API_PREFIX}/reportDefinitions`,
    validate: {
      query: _configSchema.schema.object({
        fromIndex: _configSchema.schema.maybe(_configSchema.schema.number()),
        maxItems: _configSchema.schema.maybe(_configSchema.schema.number())
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report_definition', 'list', 'count');
    const {
      fromIndex,
      maxItems
    } = request.query;
    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request);
      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.getReportDefinitions', {
        fromIndex: fromIndex,
        maxItems: maxItems || _constants.DEFAULT_MAX_SIZE
      });
      const reportDefinitionsList = (0, _backendToUi.backendToUiReportDefinitionsList)(opensearchResp.reportDefinitionDetailsList, basePath);
      return response.ok({
        body: {
          data: reportDefinitionsList
        }
      });
    } catch (error) {
      //@ts-ignore
      context.reporting_plugin.logger.error(`Failed to get report definition details: ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'list', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });

  // get report definition detail by id
  router.get({
    path: `${_common.API_PREFIX}/reportDefinitions/{reportDefinitionId}`,
    validate: {
      params: _configSchema.schema.object({
        reportDefinitionId: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report_definition', 'info', 'count');
    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request);
      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.getReportDefinitionById', {
        reportDefinitionId: request.params.reportDefinitionId
      });
      const reportDefinition = (0, _backendToUi.backendToUiReportDefinition)(opensearchResp.reportDefinitionDetails, basePath);
      return response.ok({
        body: {
          report_definition: reportDefinition
        }
      });
    } catch (error) {
      //@ts-ignore
      context.reporting_plugin.logger.error(`Failed to get single report details: ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'info', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });

  // Delete report definition by id
  router.delete({
    path: `${_common.API_PREFIX}/reportDefinitions/{reportDefinitionId}`,
    validate: {
      params: _configSchema.schema.object({
        reportDefinitionId: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report_definition', 'delete', 'count');
    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request);
      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.deleteReportDefinitionById', {
        reportDefinitionId: request.params.reportDefinitionId
      });
      return response.ok({
        body: {
          state: 'Report definition deleted',
          opensearch_response: opensearchResp
        }
      });
    } catch (error) {
      //@ts-ignore
      context.reporting_plugin.logger.error(`Failed to delete report definition: ${error}`);
      (0, _metricHelper.addToMetric)('report_definition', 'delete', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,