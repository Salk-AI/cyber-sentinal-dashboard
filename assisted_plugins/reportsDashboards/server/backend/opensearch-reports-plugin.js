"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _common = require("../../common");
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

function _default(Client, config, components) {
  const clientAction = components.clientAction.factory;
  Client.prototype.opensearch_reports = components.clientAction.namespaceFactory();
  const opensearchReports = Client.prototype.opensearch_reports.prototype;

  /**
   * report related APIs
   */
  opensearchReports.createReport = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.ON_DEMAND_REPORT}`
    },
    method: 'PUT',
    needBody: true
  });
  opensearchReports.createReportFromDefinition = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.ON_DEMAND_REPORT}/<%=reportDefinitionId%>`,
      req: {
        reportDefinitionId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'POST',
    needBody: true
  });
  opensearchReports.updateReportInstanceStatus = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_INSTANCE}/<%=reportInstanceId%>`,
      req: {
        reportInstanceId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'POST',
    needBody: true
  });
  opensearchReports.getReportById = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_INSTANCE}/<%=reportInstanceId%>`,
      req: {
        reportInstanceId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'GET'
  });
  opensearchReports.getReports = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.LIST_REPORT_INSTANCES}`,
      params: {
        fromIndex: {
          type: 'number'
        },
        maxItems: {
          type: 'number'
        }
      }
    },
    method: 'GET'
  });

  /**
   * report definition related APIs
   */
  opensearchReports.createReportDefinition = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_DEFINITION}`
    },
    method: 'POST',
    needBody: true
  });
  opensearchReports.updateReportDefinitionById = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_DEFINITION}/<%=reportDefinitionId%>`,
      req: {
        reportDefinitionId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'PUT',
    needBody: true
  });
  opensearchReports.getReportDefinitionById = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_DEFINITION}/<%=reportDefinitionId%>`,
      req: {
        reportDefinitionId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'GET'
  });
  opensearchReports.getReportDefinitions = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.LIST_REPORT_DEFINITIONS}`,
      params: {
        fromIndex: {
          type: 'number'
        },
        maxItems: {
          type: 'number'
        }
      }
    },
    method: 'GET'
  });
  opensearchReports.deleteReportDefinitionById = clientAction({
    url: {
      fmt: `${_common.OPENSEARCH_REPORTS_API.REPORT_DEFINITION}/<%=reportDefinitionId%>`,
      req: {
        reportDefinitionId: {
          type: 'string',
          required: true
        }
      }
    },
    method: 'DELETE'
  });
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,