"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateReportDefinition = exports.validateReport = exports.regexReportName = exports.regexRelativeUrl = exports.regexEmailAddress = exports.regexDuration = exports.isValidRelativeUrl = void 0;
var _path = _interopRequireDefault(require("path"));
var _model = require("../../server/model");
var _constants = require("../../server/routes/utils/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

const isValidRelativeUrl = relativeUrl => {
  let normalizedRelativeUrl = relativeUrl;
  if (!relativeUrl.includes('observability#/notebooks') && !relativeUrl.includes('notebooks-dashboards')) {
    normalizedRelativeUrl = _path.default.posix.normalize(relativeUrl);
  }

  // check pattern
  // ODFE pattern: /app/dashboards#/view/7adfa750-4c81-11e8-b3d7-01146121b73d?_g
  // AES pattern: /_plugin/kibana/app/dashboards#/view/7adfa750-4c81-11e8-b3d7-01146121b73d?_g
  const isValid = regexRelativeUrl.test(normalizedRelativeUrl);
  return isValid;
};

/**
 * moment.js isValid() API fails to validate time duration, so use regex
 * https://github.com/moment/moment/issues/1805
 **/
exports.isValidRelativeUrl = isValidRelativeUrl;
const regexDuration = exports.regexDuration = /^([-+]?)P(?=\d|T[-+]?\d)(?:([-+]?\d+)Y)?(?:([-+]?\d+)M)?(?:([-+]?\d+)([DW]))?(?:T(?:([-+]?\d+)H)?(?:([-+]?\d+)M)?(?:([-+]?\d+(?:\.\d+)?)S)?)?$/;
const regexEmailAddress = exports.regexEmailAddress = /\S+@\S+\.\S+/;
const regexReportName = exports.regexReportName = /^[\w\-\s\(\)\[\]\,\_\-+]+$/;
const regexRelativeUrl = exports.regexRelativeUrl = /^\/(_plugin\/kibana\/|_dashboards\/)?app\/(dashboards|visualize|discover|discoverLegacy|data-explorer\/discover\/?|observability-dashboards|observability-notebooks|notebooks-dashboards\?view=output_only(&security_tenant=.+)?)(\?security_tenant=.+)?#\/(notebooks\/|view\/|edit\/)?[^\/]+$/;
const validateReport = async (client, report, basePath) => {
  report.query_url = report.query_url.replace(basePath, '');
  report.report_definition.report_params.core_params.base_url = report.report_definition.report_params.core_params.base_url.replace(basePath, '');
  // validate basic schema
  report = _model.reportSchema.validate(report);
  // parse to retrieve data
  const {
    query_url: queryUrl,
    report_definition: {
      report_params: {
        report_source: reportSource
      }
    }
  } = report;
  // Check if saved object actually exists
  await validateSavedObject(client, queryUrl, reportSource);
  return report;
};
exports.validateReport = validateReport;
const validateReportDefinition = async (client, reportDefinition, basePath) => {
  reportDefinition.report_params.core_params.base_url = reportDefinition.report_params.core_params.base_url.replace(basePath, '');
  // validate basic schema
  reportDefinition = _model.reportDefinitionSchema.validate(reportDefinition);
  // parse to retrieve data
  const {
    report_params: {
      report_source: reportSource,
      core_params: {
        base_url: baseUrl
      }
    }
  } = reportDefinition;
  // Check if saved object actually exists
  await validateSavedObject(client, baseUrl, reportSource);
  return reportDefinition;
};
exports.validateReportDefinition = validateReportDefinition;
const validateSavedObject = async (client, url, source) => {
  const getId = url => {
    var _url$split$pop;
    return (_url$split$pop = url.split('/').pop()) === null || _url$split$pop === void 0 ? void 0 : _url$split$pop.replace(/\?\S+$/, '');
  };
  const getType = source => {
    switch (source) {
      case _constants.REPORT_TYPE.dashboard:
        return 'dashboard';
      case _constants.REPORT_TYPE.savedSearch:
        return 'search';
      case _constants.REPORT_TYPE.visualization:
        return 'visualization';
      case _constants.REPORT_TYPE.notebook:
        return 'notebook';
    }
  };
  let exist = false;
  let savedObjectId = '';
  if (getType(source) === 'notebook') {
    // no backend check for notebooks because we would just be checking against the notebooks api again
    exist = true;
  } else {
    savedObjectId = `${getType(source)}:${getId(url)}`;
    const params = {
      index: '.kibana',
      id: savedObjectId
    };
    exist = await client.callAsCurrentUser('exists', params);
  }
  if (!exist) {
    throw Error(`saved object with id ${savedObjectId} does not exist`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,