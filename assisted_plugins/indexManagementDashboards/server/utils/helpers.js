"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMustQuery = getMustQuery;
exports.getSearchString = getSearchString;
exports.transformManagedIndexMetaData = transformManagedIndexMetaData;
var _lodash = _interopRequireDefault(require("lodash"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

function transformManagedIndexMetaData(metaData) {
  if (!metaData) return null;
  // If this is not a managed index or we are still initializing we still return the
  // plugins.index_state_management.policy_id setting, but nothing else from the explain API
  if (!metaData.index) return null;
  return {
    index: metaData.index,
    // We know indexUuid and policyName exist if index exists
    indexUuid: metaData.index_uuid,
    policyId: metaData.policy_id,
    policySeqNo: metaData.policy_seq_no,
    policyPrimaryTerm: metaData.policy_primary_term,
    policyCompleted: metaData.policy_completed,
    rolledOver: metaData.rolled_over,
    transitionTo: metaData.transition_to,
    state: metaData.state ? {
      name: metaData.state.name,
      startTime: metaData.state.start_time
    } : undefined,
    action: metaData.action ? {
      name: metaData.action.name,
      startTime: metaData.action.start_time,
      index: metaData.action.index,
      failed: metaData.action.failed,
      consumedRetries: metaData.action.consumed_retries
    } : undefined,
    retryInfo: metaData.retry_info ? {
      failed: metaData.retry_info.failed,
      consumedRetries: metaData.retry_info.consumed_retries
    } : undefined,
    info: metaData.info
  };
}
function getMustQuery(field, search) {
  const str = search.trim();
  if (search.trim()) {
    return {
      query_string: {
        default_field: field,
        default_operator: "AND",
        query: str ? `*${str.split(" ").join("* *")}*` : "*"
      }
    };
  }
  return {
    match_all: {}
  };
}
function getSearchString(terms, indices, dataStreams, showDataStreams = true) {
  // Terms are searched with a wildcard around them.
  const searchTerms = terms ? `*${_lodash.default.castArray(terms).join("*,*")}*` : "";

  // Indices and data streams are searched with wildcards around them.
  const searchIndices = indices ? `*${_lodash.default.castArray(indices).join("*,*")}*` : "";
  const searchDataStreams = dataStreams ? `*${_lodash.default.castArray(dataStreams).join("*,*")}*` : "";

  // The overall search string is a combination of terms, indices, and data streams.
  // If the search string is blank, then '*' is used to match everything.
  const resolved = [searchTerms, searchIndices, searchDataStreams].filter(value => value !== "").join(",") || "*";
  // We don't want to fetch managed datastream indices if there are not selected by caller.
  return showDataStreams ? resolved : resolved + " -.ds*";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,