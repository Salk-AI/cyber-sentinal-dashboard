"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRANSFORM_AGG_TYPE = exports.GROUP_TYPES = exports.AliasActions = void 0;
/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
// TODO: Backend has PR out to change this model, this needs to be updated once that goes through
/**
 * ManagedIndex item shown in the Managed Indices table
 */
/**
 * Interface what the Policy Opensearch Document
 */
// Data model that contains both rollup item and metadata of rollup job
let AliasActions = exports.AliasActions = /*#__PURE__*/function (AliasActions) {
  AliasActions["ADD"] = "add";
  AliasActions["REMOVE"] = "remove";
  return AliasActions;
}({}); //Frontend dimension data model
//Frontend metric data model
//Backend dimension data model
//Backend metric data model
let GROUP_TYPES = exports.GROUP_TYPES = /*#__PURE__*/function (GROUP_TYPES) {
  GROUP_TYPES["histogram"] = "histogram";
  GROUP_TYPES["dateHistogram"] = "date_histogram";
  GROUP_TYPES["terms"] = "terms";
  return GROUP_TYPES;
}({});
let TRANSFORM_AGG_TYPE = exports.TRANSFORM_AGG_TYPE = /*#__PURE__*/function (TRANSFORM_AGG_TYPE) {
  TRANSFORM_AGG_TYPE["sum"] = "sum";
  TRANSFORM_AGG_TYPE["max"] = "max";
  TRANSFORM_AGG_TYPE["min"] = "min";
  TRANSFORM_AGG_TYPE["avg"] = "avg";
  TRANSFORM_AGG_TYPE["value_count"] = "value_count";
  TRANSFORM_AGG_TYPE["percentiles"] = "percentiles";
  TRANSFORM_AGG_TYPE["scripted_metric"] = "scripted_metric";
  TRANSFORM_AGG_TYPE["terms"] = "terms";
  TRANSFORM_AGG_TYPE["histogram"] = "histogram";
  TRANSFORM_AGG_TYPE["date_histogram"] = "date_histogram";
  return TRANSFORM_AGG_TYPE;
}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,