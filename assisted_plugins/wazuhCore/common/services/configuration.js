"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EpluginSettingType = exports.Configuration = void 0;
var _lodash = require("lodash");
var _settings2 = require("./settings");
var _fileSize = require("./file-size");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
let EpluginSettingType = exports.EpluginSettingType = /*#__PURE__*/function (EpluginSettingType) {
  EpluginSettingType["text"] = "text";
  EpluginSettingType["password"] = "password";
  EpluginSettingType["textarea"] = "textarea";
  EpluginSettingType["switch"] = "switch";
  EpluginSettingType["number"] = "number";
  EpluginSettingType["editor"] = "editor";
  EpluginSettingType["select"] = "select";
  EpluginSettingType["filepicker"] = "filepicker";
  return EpluginSettingType;
}({});
class Configuration {
  constructor(logger, store) {
    this.logger = logger;
    _defineProperty(this, "store", null);
    _defineProperty(this, "_settings", void 0);
    _defineProperty(this, "_categories", void 0);
    this._settings = new Map();
    this._categories = new Map();
    this.setStore(store);
  }
  setStore(store) {
    this.store = store;
    this.store.setConfiguration(this);
  }
  async setup(dependencies = {}) {
    return this.store.setup(dependencies);
  }
  async start(dependencies = {}) {
    return this.store.start(dependencies);
  }
  async stop(dependencies = {}) {
    return this.store.stop(dependencies);
  }
  /**
   * Register a setting
   * @param id
   * @param value
   */
  register(id, value) {
    if (!this._settings.has(id)) {
      // Enhance the setting
      const enhancedValue = value;
      // Enhance the description
      enhancedValue._description = value.description;
      enhancedValue.description = this.enhanceSettingDescription(value);
      // Register the setting
      this._settings.set(id, enhancedValue);
      this.logger.debug(`Registered ${id}`);
    } else {
      const message = `Setting ${id} exists`;
      this.logger.error(message);
      throw new Error(message);
    }
  }
  checkRequirementsOnUpdatedSettings(settings) {
    return {
      requiresRunningHealthCheck: settings.some(key => {
        var _this$_settings$get;
        return (_this$_settings$get = this._settings.get(key)) === null || _this$_settings$get === void 0 ? void 0 : _this$_settings$get.requiresRunningHealthCheck;
      }),
      requiresReloadingBrowserTab: settings.some(key => {
        var _this$_settings$get2;
        return (_this$_settings$get2 = this._settings.get(key)) === null || _this$_settings$get2 === void 0 ? void 0 : _this$_settings$get2.requiresReloadingBrowserTab;
      }),
      requiresRestartingPluginPlatform: settings.some(key => {
        var _this$_settings$get3;
        return (_this$_settings$get3 = this._settings.get(key)) === null || _this$_settings$get3 === void 0 ? void 0 : _this$_settings$get3.requiresRestartingPluginPlatform;
      })
    };
  }

  /**
   * Special: Get the value for a setting from a value or someone of the default values. This is used for the settings of customization to get the hidden default value, because the default value is empty to not to be displayed on the App Settings
   * It retunts defaultValueIfNotSet or defaultValue
   * @param settingKey
   * @param value
   * @returns
   */
  getSettingValueIfNotSet(settingKey, value) {
    this.logger.debug(`Getting value for [${settingKey}]: stored [${JSON.stringify(value)}]`);
    if (!this._settings.has(settingKey)) {
      throw new Error(`${settingKey} is not registered`);
    }
    if (typeof value !== 'undefined') {
      return value;
    }
    const setting = this._settings.get(settingKey);
    const finalValue = typeof setting.defaultValueIfNotSet !== 'undefined' ? setting.defaultValueIfNotSet : setting.defaultValue;
    this.logger.debug(`Value for [${settingKey}]: [${JSON.stringify(finalValue)}]`);
    return finalValue;
  }

  /**
   * Get the value for a setting from a value or someone of the default values:
   * It returns defaultValue
   * @param settingKey
   * @param value
   * @returns
   */
  getSettingValue(settingKey, value) {
    this.logger.debug(`Getting value for [${settingKey}]: stored [${JSON.stringify(value)}]`);
    if (!this._settings.has(settingKey)) {
      throw new Error(`${settingKey} is not registered`);
    }
    if (typeof value !== 'undefined') {
      return value;
    }
    const setting = this._settings.get(settingKey);
    const finalValue = setting.defaultValue;
    this.logger.debug(`Value for [${settingKey}]: [${JSON.stringify(finalValue)}]`);
    return finalValue;
  }
  /**
   * Get the value for all settings or a subset of them
   * @param rest
   * @returns
   */
  async get(...settings) {
    this.logger.debug(settings.length ? `Getting settings [${settings.join(',')}]` : 'Getting settings');
    const stored = await this.store.get(...settings);
    this.logger.debug(`configuration stored: ${JSON.stringify({
      stored
    })}`);
    const result = settings && settings.length === 1 ? this.getSettingValue(settings[0], stored[settings[0]]) : (settings.length > 1 ? settings : Array.from(this._settings.keys())).reduce((accum, key) => ({
      ...accum,
      [key]: this.getSettingValue(key, stored[key])
    }), {});

    // Clone the result. This avoids the object reference can be changed when managing the result.
    return (0, _lodash.cloneDeep)(result);
  }
  /**
   * Set a the value for a subset of settings
   * @param settings
   * @returns
   */
  async set(settings) {
    const settingsAreRegistered = Object.entries(settings).map(([key]) => this._settings.has(key) ? null : `${key} is not registered`).filter(value => value);
    if (settingsAreRegistered.length) {
      throw new Error(`${settingsAreRegistered.join(', ')} are not registered`);
    }
    const validationErrors = Object.entries(settings).map(([key, value]) => {
      var _this$_settings$get4, _this$_settings$get4$;
      const validationError = (_this$_settings$get4 = this._settings.get(key)) === null || _this$_settings$get4 === void 0 || (_this$_settings$get4$ = _this$_settings$get4.validate) === null || _this$_settings$get4$ === void 0 ? void 0 : _this$_settings$get4$.call(_this$_settings$get4, value);
      return validationError ? `setting [${key}]: ${validationError}` : undefined;
    }).filter(value => value);
    if (validationErrors.length) {
      throw new Error(`Validation errors: ${validationErrors.join('\n')}`);
    }
    const responseStore = await this.store.set(settings);
    return {
      requirements: this.checkRequirementsOnUpdatedSettings(Object.keys(responseStore)),
      update: responseStore
    };
  }

  /**
   * Clean the values for all settings or a subset of them
   * @param rest
   * @returns
   */
  async clear(...settings) {
    if (settings.length) {
      this.logger.debug(`Clean settings: ${settings.join(', ')}`);
      const responseStore = await this.store.clear(...settings);
      this.logger.info('Settings were cleared');
      return {
        requirements: this.checkRequirementsOnUpdatedSettings(Object.keys(responseStore)),
        update: responseStore
      };
    } else {
      return await this.clear(...Array.from(this._settings.keys()));
    }
  }

  /**
   * Reset the values for all settings or a subset of them
   * @param settings
   * @returns
   */
  async reset(...settings) {
    if (settings.length) {
      this.logger.debug(`Reset settings: ${settings.join(', ')}`);
      const updatedSettings = settings.reduce((accum, settingKey) => {
        return {
          ...accum,
          [settingKey]: this.getSettingValue(settingKey)
        };
      }, {});
      const responseStore = await this.store.set(updatedSettings);
      this.logger.info('Settings were reset');
      return {
        requirements: this.checkRequirementsOnUpdatedSettings(Object.keys(responseStore)),
        update: responseStore
      };
    } else {
      return await this.reset(...this._settings.keys());
    }
  }
  registerCategory({
    id,
    ...rest
  }) {
    if (this._categories.has(id)) {
      this.logger.error(`Registered category [${id}]`);
      throw new Error(`Category exists [${id}]`);
    }
    this._categories.set(id, rest);
    this.logger.debug(`Registered category [${id}]`);
  }
  getUniqueCategories() {
    return [...new Set(Array.from(this._settings.entries()).filter(([, {
      isConfigurableFromSettings
    }]) => isConfigurableFromSettings).map(([, {
      category
    }]) => category))].map(categoryID => this._categories.get(String(categoryID))).sort((categoryA, categoryB) => {
      if (categoryA.title > categoryB.title) {
        return 1;
      } else if (categoryA.title < categoryB.title) {
        return -1;
      }
      return 0;
    });
  }
  enhanceSettingDescription(setting) {
    var _options$file, _options$file2, _options$file3, _options$file4;
    const {
      description,
      options
    } = setting;
    return [description, ...(options !== null && options !== void 0 && options.select ? [`Allowed values: ${options.select.map(({
      text,
      value
    }) => (0, _settings2.formatLabelValuePair)(text, value)).join(', ')}.`] : []), ...(options !== null && options !== void 0 && options.switch ? [`Allowed values: ${['enabled', 'disabled'].map(s => (0, _settings2.formatLabelValuePair)(options.switch.values[s].label, options.switch.values[s].value)).join(', ')}.`] : []), ...(options !== null && options !== void 0 && options.number && 'min' in options.number ? [`Minimum value: ${options.number.min}.`] : []), ...(options !== null && options !== void 0 && options.number && 'max' in options.number ? [`Maximum value: ${options.number.max}.`] : []),
    // File extensions
    ...(options !== null && options !== void 0 && (_options$file = options.file) !== null && _options$file !== void 0 && _options$file.extensions ? [`Supported extensions: ${options.file.extensions.join(', ')}.`] : []),
    // File recommended dimensions
    ...(options !== null && options !== void 0 && (_options$file2 = options.file) !== null && _options$file2 !== void 0 && (_options$file2 = _options$file2.recommended) !== null && _options$file2 !== void 0 && _options$file2.dimensions ? [`Recommended dimensions: ${options.file.recommended.dimensions.width}x${options.file.recommended.dimensions.height}${options.file.recommended.dimensions.unit || ''}.`] : []),
    // File size
    ...(options !== null && options !== void 0 && (_options$file3 = options.file) !== null && _options$file3 !== void 0 && _options$file3.size && typeof options.file.size.minBytes !== 'undefined' ? [`Minimum file size: ${(0, _fileSize.formatBytes)(options.file.size.minBytes)}.`] : []), ...(options !== null && options !== void 0 && (_options$file4 = options.file) !== null && _options$file4 !== void 0 && _options$file4.size && typeof options.file.size.maxBytes !== 'undefined' ? [`Maximum file size: ${(0, _fileSize.formatBytes)(options.file.size.maxBytes)}.`] : []),
    // Multi line text
    ...(options !== null && options !== void 0 && options.maxRows && typeof options.maxRows !== 'undefined' ? [`Maximum amount of lines: ${options.maxRows}.`] : []), ...(options !== null && options !== void 0 && options.minRows && typeof options.minRows !== 'undefined' ? [`Minimum amount of lines: ${options.minRows}.`] : []), ...(options !== null && options !== void 0 && options.maxLength && typeof options.maxLength !== 'undefined' ? [`Maximum lines length is ${options.maxLength} characters.`] : [])].join(' ');
  }
  groupSettingsByCategory(_settings = null, filterFunction = null) {
    const settings = (_settings && Array.isArray(_settings) ? Array.from(this._settings.entries()).filter(([key]) => _settings.includes(key)) : Array.from(this._settings.entries())).map(([key, value]) => ({
      ...value,
      key
    }));
    const settingsSortedByCategories = (filterFunction ? settings.filter(filterFunction) : settings).sort((settingA, settingB) => {
      var _settingA$key, _settingA$key$localeC;
      return (_settingA$key = settingA.key) === null || _settingA$key === void 0 || (_settingA$key$localeC = _settingA$key.localeCompare) === null || _settingA$key$localeC === void 0 ? void 0 : _settingA$key$localeC.call(_settingA$key, settingB.key);
    }).reduce((accum, pluginSettingConfiguration) => ({
      ...accum,
      [pluginSettingConfiguration.category]: [...(accum[pluginSettingConfiguration.category] || []), {
        ...pluginSettingConfiguration
      }]
    }), {});
    return Object.entries(settingsSortedByCategories).map(([category, settings]) => ({
      category: this._categories.get(String(category)),
      settings
    })).filter(categoryEntry => categoryEntry.settings.length);
  }
}
exports.Configuration = Configuration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,