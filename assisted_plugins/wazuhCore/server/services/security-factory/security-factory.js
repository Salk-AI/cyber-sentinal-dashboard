"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDashboardSecurity = createDashboardSecurity;
var _factories = require("./factories");
var _cookie = require("../cookie");
var _jwtDecode = _interopRequireDefault(require("jwt-decode"));
var _constants = require("../../../common/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function createDashboardSecurity({
  securityDashboards
}) {
  const dashboardSecurity = !!securityDashboards ? new _factories.OpenSearchDashboardsSecurityFactory() : new _factories.DefaultFactory();
  enhanceDashboardSecurity(dashboardSecurity);
  return dashboardSecurity;
}
function enhanceDashboardSecurity(dashboardSecurity) {
  dashboardSecurity.isAdministratorUser = async function (context, request) {
    try {
      // Check if user has administrator role in token
      const token = (0, _cookie.getCookieValueByName)(request.headers.cookie, 'wz-token');
      if (!token) {
        return {
          administrator: false,
          administrator_requirements: 'No token provider'
        };
      }
      const decodedToken = (0, _jwtDecode.default)(token);
      if (!decodedToken) {
        return {
          administrator: false,
          administrator_requirements: 'No permissions in token'
        };
      }
      if (!decodedToken.rbac_roles || !decodedToken.rbac_roles.includes(_constants.WAZUH_ROLE_ADMINISTRATOR_ID)) {
        return {
          administrator: false,
          administrator_requirements: 'No administrator role'
        };
      }
      // Check the provided token is valid
      const apiHostID = (0, _cookie.getCookieValueByName)(request.headers.cookie, 'wz-api');
      if (!apiHostID) {
        return {
          administrator: false,
          administrator_requirements: 'No API id provided'
        };
      }
      const responseTokenIsWorking = await context.wazuh_core.api.client.asCurrentUser.request('GET', '/', {}, {
        apiHostID
      });
      if (responseTokenIsWorking.status !== 200) {
        return {
          administrator: false,
          administrator_requirements: 'Token is not valid'
        };
      }
      return {
        administrator: true,
        administrator_requirements: null
      };
    } catch (error) {
      return {
        administror: false,
        administrator_requirements: `It could not check if the current user is administrator due to: ${error.message}`
      };
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmFjdG9yaWVzIiwicmVxdWlyZSIsIl9jb29raWUiLCJfand0RGVjb2RlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb25zdGFudHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNyZWF0ZURhc2hib2FyZFNlY3VyaXR5Iiwic2VjdXJpdHlEYXNoYm9hcmRzIiwiZGFzaGJvYXJkU2VjdXJpdHkiLCJPcGVuU2VhcmNoRGFzaGJvYXJkc1NlY3VyaXR5RmFjdG9yeSIsIkRlZmF1bHRGYWN0b3J5IiwiZW5oYW5jZURhc2hib2FyZFNlY3VyaXR5IiwiaXNBZG1pbmlzdHJhdG9yVXNlciIsImNvbnRleHQiLCJyZXF1ZXN0IiwidG9rZW4iLCJnZXRDb29raWVWYWx1ZUJ5TmFtZSIsImhlYWRlcnMiLCJjb29raWUiLCJhZG1pbmlzdHJhdG9yIiwiYWRtaW5pc3RyYXRvcl9yZXF1aXJlbWVudHMiLCJkZWNvZGVkVG9rZW4iLCJqd3REZWNvZGUiLCJyYmFjX3JvbGVzIiwiaW5jbHVkZXMiLCJXQVpVSF9ST0xFX0FETUlOSVNUUkFUT1JfSUQiLCJhcGlIb3N0SUQiLCJyZXNwb25zZVRva2VuSXNXb3JraW5nIiwid2F6dWhfY29yZSIsImFwaSIsImNsaWVudCIsImFzQ3VycmVudFVzZXIiLCJzdGF0dXMiLCJlcnJvciIsImFkbWluaXN0cm9yIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbInNlY3VyaXR5LWZhY3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgT3BlblNlYXJjaERhc2hib2FyZHNTZWN1cml0eUZhY3RvcnksXG4gIERlZmF1bHRGYWN0b3J5LFxufSBmcm9tICcuL2ZhY3Rvcmllcyc7XG5pbXBvcnQge1xuICBPcGVuU2VhcmNoRGFzaGJvYXJkc1JlcXVlc3QsXG4gIFJlcXVlc3RIYW5kbGVyQ29udGV4dCxcbn0gZnJvbSAnc3JjL2NvcmUvc2VydmVyJztcbmltcG9ydCB7IFBsdWdpblNldHVwIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0Q29va2llVmFsdWVCeU5hbWUgfSBmcm9tICcuLi9jb29raWUnO1xuaW1wb3J0IGp3dERlY29kZSBmcm9tICdqd3QtZGVjb2RlJztcbmltcG9ydCB7IFdBWlVIX1JPTEVfQURNSU5JU1RSQVRPUl9JRCB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG50eXBlIEN1cnJlbnRVc2VyID0ge1xuICB1c2VybmFtZT86IHN0cmluZztcbiAgYXV0aENvbnRleHQ6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZWN1cml0eUZhY3Rvcnkge1xuICBwbGF0Zm9ybT86IHN0cmluZztcbiAgZ2V0Q3VycmVudFVzZXIoXG4gICAgcmVxdWVzdDogT3BlblNlYXJjaERhc2hib2FyZHNSZXF1ZXN0LFxuICAgIGNvbnRleHQ/OiBSZXF1ZXN0SGFuZGxlckNvbnRleHQsXG4gICk6IFByb21pc2U8Q3VycmVudFVzZXI+O1xuICBpc0FkbWluaXN0cmF0b3JVc2VyKFxuICAgIGNvbnRleHQ6IFJlcXVlc3RIYW5kbGVyQ29udGV4dCxcbiAgICByZXF1ZXN0OiBPcGVuU2VhcmNoRGFzaGJvYXJkc1JlcXVlc3QsXG4gICk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEYXNoYm9hcmRTZWN1cml0eSh7XG4gIHNlY3VyaXR5RGFzaGJvYXJkcyxcbn06IFBsdWdpblNldHVwKTogSVNlY3VyaXR5RmFjdG9yeSB7XG4gIGNvbnN0IGRhc2hib2FyZFNlY3VyaXR5ID0gISFzZWN1cml0eURhc2hib2FyZHNcbiAgICA/IG5ldyBPcGVuU2VhcmNoRGFzaGJvYXJkc1NlY3VyaXR5RmFjdG9yeSgpXG4gICAgOiBuZXcgRGVmYXVsdEZhY3RvcnkoKTtcblxuICBlbmhhbmNlRGFzaGJvYXJkU2VjdXJpdHkoZGFzaGJvYXJkU2VjdXJpdHkpO1xuICByZXR1cm4gZGFzaGJvYXJkU2VjdXJpdHk7XG59XG5cbmZ1bmN0aW9uIGVuaGFuY2VEYXNoYm9hcmRTZWN1cml0eShkYXNoYm9hcmRTZWN1cml0eSkge1xuICBkYXNoYm9hcmRTZWN1cml0eS5pc0FkbWluaXN0cmF0b3JVc2VyID0gYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQsIHJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgYWRtaW5pc3RyYXRvciByb2xlIGluIHRva2VuXG4gICAgICBjb25zdCB0b2tlbiA9IGdldENvb2tpZVZhbHVlQnlOYW1lKHJlcXVlc3QuaGVhZGVycy5jb29raWUsICd3ei10b2tlbicpO1xuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFkbWluaXN0cmF0b3I6IGZhbHNlLFxuICAgICAgICAgIGFkbWluaXN0cmF0b3JfcmVxdWlyZW1lbnRzOiAnTm8gdG9rZW4gcHJvdmlkZXInLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgZGVjb2RlZFRva2VuID0gand0RGVjb2RlKHRva2VuKTtcbiAgICAgIGlmICghZGVjb2RlZFRva2VuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWRtaW5pc3RyYXRvcjogZmFsc2UsXG4gICAgICAgICAgYWRtaW5pc3RyYXRvcl9yZXF1aXJlbWVudHM6ICdObyBwZXJtaXNzaW9ucyBpbiB0b2tlbicsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgICFkZWNvZGVkVG9rZW4ucmJhY19yb2xlcyB8fFxuICAgICAgICAhZGVjb2RlZFRva2VuLnJiYWNfcm9sZXMuaW5jbHVkZXMoV0FaVUhfUk9MRV9BRE1JTklTVFJBVE9SX0lEKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWRtaW5pc3RyYXRvcjogZmFsc2UsXG4gICAgICAgICAgYWRtaW5pc3RyYXRvcl9yZXF1aXJlbWVudHM6ICdObyBhZG1pbmlzdHJhdG9yIHJvbGUnLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhlIHByb3ZpZGVkIHRva2VuIGlzIHZhbGlkXG4gICAgICBjb25zdCBhcGlIb3N0SUQgPSBnZXRDb29raWVWYWx1ZUJ5TmFtZShyZXF1ZXN0LmhlYWRlcnMuY29va2llLCAnd3otYXBpJyk7XG4gICAgICBpZiAoIWFwaUhvc3RJRCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFkbWluaXN0cmF0b3I6IGZhbHNlLFxuICAgICAgICAgIGFkbWluaXN0cmF0b3JfcmVxdWlyZW1lbnRzOiAnTm8gQVBJIGlkIHByb3ZpZGVkJyxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3BvbnNlVG9rZW5Jc1dvcmtpbmcgPVxuICAgICAgICBhd2FpdCBjb250ZXh0LndhenVoX2NvcmUuYXBpLmNsaWVudC5hc0N1cnJlbnRVc2VyLnJlcXVlc3QoXG4gICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgJy8nLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIHsgYXBpSG9zdElEIH0sXG4gICAgICAgICk7XG4gICAgICBpZiAocmVzcG9uc2VUb2tlbklzV29ya2luZy5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFkbWluaXN0cmF0b3I6IGZhbHNlLFxuICAgICAgICAgIGFkbWluaXN0cmF0b3JfcmVxdWlyZW1lbnRzOiAnVG9rZW4gaXMgbm90IHZhbGlkJyxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkbWluaXN0cmF0b3I6IHRydWUsXG4gICAgICAgIGFkbWluaXN0cmF0b3JfcmVxdWlyZW1lbnRzOiBudWxsLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWRtaW5pc3Ryb3I6IGZhbHNlLFxuICAgICAgICBhZG1pbmlzdHJhdG9yX3JlcXVpcmVtZW50czogYEl0IGNvdWxkIG5vdCBjaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGFkbWluaXN0cmF0b3IgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFTQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFKLE9BQUE7QUFBd0UsU0FBQUcsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFtQmpFLFNBQVNHLHVCQUF1QkEsQ0FBQztFQUN0Q0M7QUFDVyxDQUFDLEVBQW9CO0VBQ2hDLE1BQU1DLGlCQUFpQixHQUFHLENBQUMsQ0FBQ0Qsa0JBQWtCLEdBQzFDLElBQUlFLDhDQUFtQyxDQUFDLENBQUMsR0FDekMsSUFBSUMseUJBQWMsQ0FBQyxDQUFDO0VBRXhCQyx3QkFBd0IsQ0FBQ0gsaUJBQWlCLENBQUM7RUFDM0MsT0FBT0EsaUJBQWlCO0FBQzFCO0FBRUEsU0FBU0csd0JBQXdCQSxDQUFDSCxpQkFBaUIsRUFBRTtFQUNuREEsaUJBQWlCLENBQUNJLG1CQUFtQixHQUFHLGdCQUFnQkMsT0FBTyxFQUFFQyxPQUFPLEVBQUU7SUFDeEUsSUFBSTtNQUNGO01BQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUFDLDRCQUFvQixFQUFDRixPQUFPLENBQUNHLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFLFVBQVUsQ0FBQztNQUN0RSxJQUFJLENBQUNILEtBQUssRUFBRTtRQUNWLE9BQU87VUFDTEksYUFBYSxFQUFFLEtBQUs7VUFDcEJDLDBCQUEwQixFQUFFO1FBQzlCLENBQUM7TUFDSDtNQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFBQyxrQkFBUyxFQUFDUCxLQUFLLENBQUM7TUFDckMsSUFBSSxDQUFDTSxZQUFZLEVBQUU7UUFDakIsT0FBTztVQUNMRixhQUFhLEVBQUUsS0FBSztVQUNwQkMsMEJBQTBCLEVBQUU7UUFDOUIsQ0FBQztNQUNIO01BQ0EsSUFDRSxDQUFDQyxZQUFZLENBQUNFLFVBQVUsSUFDeEIsQ0FBQ0YsWUFBWSxDQUFDRSxVQUFVLENBQUNDLFFBQVEsQ0FBQ0Msc0NBQTJCLENBQUMsRUFDOUQ7UUFDQSxPQUFPO1VBQ0xOLGFBQWEsRUFBRSxLQUFLO1VBQ3BCQywwQkFBMEIsRUFBRTtRQUM5QixDQUFDO01BQ0g7TUFDQTtNQUNBLE1BQU1NLFNBQVMsR0FBRyxJQUFBViw0QkFBb0IsRUFBQ0YsT0FBTyxDQUFDRyxPQUFPLENBQUNDLE1BQU0sRUFBRSxRQUFRLENBQUM7TUFDeEUsSUFBSSxDQUFDUSxTQUFTLEVBQUU7UUFDZCxPQUFPO1VBQ0xQLGFBQWEsRUFBRSxLQUFLO1VBQ3BCQywwQkFBMEIsRUFBRTtRQUM5QixDQUFDO01BQ0g7TUFDQSxNQUFNTyxzQkFBc0IsR0FDMUIsTUFBTWQsT0FBTyxDQUFDZSxVQUFVLENBQUNDLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNqQixPQUFPLENBQ3ZELEtBQUssRUFDTCxHQUFHLEVBQ0gsQ0FBQyxDQUFDLEVBQ0Y7UUFBRVk7TUFBVSxDQUNkLENBQUM7TUFDSCxJQUFJQyxzQkFBc0IsQ0FBQ0ssTUFBTSxLQUFLLEdBQUcsRUFBRTtRQUN6QyxPQUFPO1VBQ0xiLGFBQWEsRUFBRSxLQUFLO1VBQ3BCQywwQkFBMEIsRUFBRTtRQUM5QixDQUFDO01BQ0g7TUFDQSxPQUFPO1FBQ0xELGFBQWEsRUFBRSxJQUFJO1FBQ25CQywwQkFBMEIsRUFBRTtNQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDLE9BQU9hLEtBQUssRUFBRTtNQUNkLE9BQU87UUFDTEMsV0FBVyxFQUFFLEtBQUs7UUFDbEJkLDBCQUEwQixFQUFHLG1FQUFrRWEsS0FBSyxDQUFDRSxPQUFRO01BQy9HLENBQUM7SUFDSDtFQUNGLENBQUM7QUFDSCJ9