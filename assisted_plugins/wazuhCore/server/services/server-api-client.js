"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerAPIClient = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _https = _interopRequireDefault(require("https"));
var _cookie = require("./cookie");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
 * Wazuh app - Interceptor API entries
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
/**
 * This service communicates with the Wazuh server APIs
 */
class ServerAPIClient {
  constructor(logger,
  // TODO: add logger as needed
  manageHosts, dashboardSecurity) {
    this.logger = logger;
    this.manageHosts = manageHosts;
    this.dashboardSecurity = dashboardSecurity;
    _defineProperty(this, "_CacheInternalUserAPIHostToken", void 0);
    _defineProperty(this, "_axios", void 0);
    _defineProperty(this, "asInternalUser", void 0);
    _defineProperty(this, "_axios", void 0);
    const httpsAgent = new _https.default.Agent({
      rejectUnauthorized: false
    });
    this._axios = _axios.default.create({
      httpsAgent
    });
    // Cache to save the token for the internal user by API host ID
    this._CacheInternalUserAPIHostToken = new Map();

    // Create internal user client
    this.asInternalUser = {
      authenticate: async apiHostID => await this._authenticateInternalUser(apiHostID),
      request: async (method, path, data, options) => await this._requestAsInternalUser(method, path, data, options)
    };
  }

  /**
   * Internal method to execute the request
   * @param method HTTP verb
   * @param path Server API endpoint
   * @param data Request data
   * @param options Options. Data about the Server API ID and the token
   * @returns
   */
  async _request(method, path, data, options) {
    const optionsRequest = await this._buildRequestOptions(method, path, data, options);
    return await this._axios(optionsRequest);
  }

  /**
   * Build the options for the request
   * @param method HTTP verb
   * @param path Server API endpoint
   * @param data Request data
   * @param options Options. Data about the Server API ID and the token
   * @returns
   */
  async _buildRequestOptions(method, path, data, {
    apiHostID,
    token
  }) {
    const api = await this.manageHosts.get(apiHostID);
    const {
      body,
      params,
      headers,
      ...rest
    } = data;
    return {
      method: method,
      headers: {
        'content-type': 'application/json',
        Authorization: 'Bearer ' + token,
        ...(headers ? headers : {})
      },
      data: body || rest || {},
      params: params || {},
      url: `${api.url}:${api.port}${path}`
    };
  }

  /**
   * Get the authentication token
   * @param apiHostID Server API ID
   * @param authContext Authentication context to get the token
   * @returns
   */
  async _authenticate(apiHostID, options) {
    const api = await this.manageHosts.get(apiHostID);
    const optionsRequest = {
      method: 'POST',
      headers: {
        'content-type': 'application/json'
      },
      auth: {
        username: api.username,
        password: api.password
      },
      url: `${api.url}:${api.port}/security/user/authenticate${options.useRunAs ? '/run_as' : ''}`,
      ...(!!(options !== null && options !== void 0 && options.authContext) ? {
        data: options === null || options === void 0 ? void 0 : options.authContext
      } : {})
    };
    const response = await this._axios(optionsRequest);
    const token = (((response || {}).data || {}).data || {}).token;
    return token;
  }

  /**
   * Get the authentication token for the internal user and cache it
   * @param apiHostID Server API ID
   * @returns
   */
  async _authenticateInternalUser(apiHostID) {
    const token = await this._authenticate(apiHostID, {
      useRunAs: false
    });
    this._CacheInternalUserAPIHostToken.set(apiHostID, token);
    return token;
  }

  /**
   * Create a client from the context and request
   * @param context
   * @param request
   * @returns
   */
  asScoped(context, request) {
    return {
      authenticate: async apiHostID => {
        const useRunAs = this.manageHosts.isEnabledAuthWithRunAs(apiHostID);
        const token = useRunAs ? await this._authenticate(apiHostID, {
          useRunAs: true,
          authContext: (await this.dashboardSecurity.getCurrentUser(request, context)).authContext
        }) : await this._authenticate(apiHostID, {
          useRunAs: false
        });
        return token;
      },
      request: async (method, path, data, options) => {
        return await this._request(method, path, data, {
          ...options,
          token: (0, _cookie.getCookieValueByName)(request.headers.cookie, 'wz-token')
        });
      }
    };
  }

  /**
   * Request as internal user
   * @param method HTTP verb
   * @param path Server API endpoint
   * @param data Request data
   * @param options Options. Data about the Server API ID and the token
   * @returns
   */
  async _requestAsInternalUser(method, path, data, options) {
    try {
      const token = this._CacheInternalUserAPIHostToken.has(options.apiHostID) && !options.forceRefresh ? this._CacheInternalUserAPIHostToken.get(options.apiHostID) : await this._authenticateInternalUser(options.apiHostID);
      return await this._request(method, path, data, {
        ...options,
        token
      });
    } catch (error) {
      if (error.response && error.response.status === 401) {
        const token = await this._authenticateInternalUser(options.apiHostID);
        return await this._request(method, path, data, {
          ...options,
          token
        });
      }
      throw error;
    }
  }
}
exports.ServerAPIClient = ServerAPIClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,