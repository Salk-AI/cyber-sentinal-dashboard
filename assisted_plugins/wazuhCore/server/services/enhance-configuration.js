"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhanceConfiguration = enhanceConfiguration;
/**
 * Returns the default value if not set when the setting is an empty string
 * @param settingKey plugin setting
 * @param value value of the plugin setting
 * @returns
 */
function resolveEmptySetting(configurationService, settingKey, value) {
  return typeof value === 'string' && value.length === 0 && configurationService._settings.get(settingKey).defaultValueIfNotSet ? configurationService.getSettingValueIfNotSet(settingKey) : value;
}
function getCustomizationSetting(configuration, currentConfiguration, settingKey) {
  const isCustomizationEnabled = currentConfiguration['customization.enabled'];
  const defaultValue = configuration.getSettingValueIfNotSet(settingKey);
  if (isCustomizationEnabled && settingKey.startsWith('customization') && settingKey !== 'customization.enabled') {
    return typeof currentConfiguration[settingKey] !== 'undefined' ? resolveEmptySetting(configuration, settingKey, currentConfiguration[settingKey]) : defaultValue;
  } else {
    return defaultValue;
  }
}
function enhanceConfiguration(configuration) {
  /**
   * Get the customiztion settings taking into account if this is enabled
   * @param settingKeys
   * @returns
   */
  configuration.getCustomizationSetting = async function (...settingKeys) {
    if (!settingKeys.length) {
      throw new Error('No settings defined');
    }
    const currentConfiguration = await this.get('customization.enabled', ...settingKeys);
    return Object.fromEntries(settingKeys.map(settingKey => [settingKey, getCustomizationSetting(this, currentConfiguration, settingKey)]));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNvbHZlRW1wdHlTZXR0aW5nIiwiY29uZmlndXJhdGlvblNlcnZpY2UiLCJzZXR0aW5nS2V5IiwidmFsdWUiLCJsZW5ndGgiLCJfc2V0dGluZ3MiLCJnZXQiLCJkZWZhdWx0VmFsdWVJZk5vdFNldCIsImdldFNldHRpbmdWYWx1ZUlmTm90U2V0IiwiZ2V0Q3VzdG9taXphdGlvblNldHRpbmciLCJjb25maWd1cmF0aW9uIiwiY3VycmVudENvbmZpZ3VyYXRpb24iLCJpc0N1c3RvbWl6YXRpb25FbmFibGVkIiwiZGVmYXVsdFZhbHVlIiwic3RhcnRzV2l0aCIsImVuaGFuY2VDb25maWd1cmF0aW9uIiwic2V0dGluZ0tleXMiLCJFcnJvciIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwibWFwIl0sInNvdXJjZXMiOlsiZW5oYW5jZS1jb25maWd1cmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uL3NlcnZpY2VzL2NvbmZpZ3VyYXRpb24nO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHZhbHVlIGlmIG5vdCBzZXQgd2hlbiB0aGUgc2V0dGluZyBpcyBhbiBlbXB0eSBzdHJpbmdcbiAqIEBwYXJhbSBzZXR0aW5nS2V5IHBsdWdpbiBzZXR0aW5nXG4gKiBAcGFyYW0gdmFsdWUgdmFsdWUgb2YgdGhlIHBsdWdpbiBzZXR0aW5nXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRW1wdHlTZXR0aW5nKFxuICBjb25maWd1cmF0aW9uU2VydmljZTogSUNvbmZpZ3VyYXRpb24sXG4gIHNldHRpbmdLZXk6IHN0cmluZyxcbiAgdmFsdWU6IHVua25vd24sXG4pIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICB2YWx1ZS5sZW5ndGggPT09IDAgJiZcbiAgICBjb25maWd1cmF0aW9uU2VydmljZS5fc2V0dGluZ3MuZ2V0KHNldHRpbmdLZXkpLmRlZmF1bHRWYWx1ZUlmTm90U2V0XG4gICAgPyBjb25maWd1cmF0aW9uU2VydmljZS5nZXRTZXR0aW5nVmFsdWVJZk5vdFNldChzZXR0aW5nS2V5KVxuICAgIDogdmFsdWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbmZpZ3VyYXRpb25FbmhhbmNlZCBleHRlbmRzIElDb25maWd1cmF0aW9uIHtcbiAgZ2V0Q3VzdG9taXphdGlvblNldHRpbmcoLi4uc2V0dGluZ0tleXM6IHN0cmluZ1tdKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VzdG9taXphdGlvblNldHRpbmcoXG4gIGNvbmZpZ3VyYXRpb246IElDb25maWd1cmF0aW9uRW5oYW5jZWQsXG4gIGN1cnJlbnRDb25maWd1cmF0aW9uOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxuICBzZXR0aW5nS2V5OiBzdHJpbmcsXG4pIHtcbiAgY29uc3QgaXNDdXN0b21pemF0aW9uRW5hYmxlZCA9IGN1cnJlbnRDb25maWd1cmF0aW9uWydjdXN0b21pemF0aW9uLmVuYWJsZWQnXTtcbiAgY29uc3QgZGVmYXVsdFZhbHVlID0gY29uZmlndXJhdGlvbi5nZXRTZXR0aW5nVmFsdWVJZk5vdFNldChzZXR0aW5nS2V5KTtcblxuICBpZiAoXG4gICAgaXNDdXN0b21pemF0aW9uRW5hYmxlZCAmJlxuICAgIHNldHRpbmdLZXkuc3RhcnRzV2l0aCgnY3VzdG9taXphdGlvbicpICYmXG4gICAgc2V0dGluZ0tleSAhPT0gJ2N1c3RvbWl6YXRpb24uZW5hYmxlZCdcbiAgKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50Q29uZmlndXJhdGlvbltzZXR0aW5nS2V5XSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgID8gcmVzb2x2ZUVtcHR5U2V0dGluZyhcbiAgICAgICAgICBjb25maWd1cmF0aW9uLFxuICAgICAgICAgIHNldHRpbmdLZXksXG4gICAgICAgICAgY3VycmVudENvbmZpZ3VyYXRpb25bc2V0dGluZ0tleV0sXG4gICAgICAgIClcbiAgICAgIDogZGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuaGFuY2VDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb246IElDb25maWd1cmF0aW9uKSB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1c3RvbWl6dGlvbiBzZXR0aW5ncyB0YWtpbmcgaW50byBhY2NvdW50IGlmIHRoaXMgaXMgZW5hYmxlZFxuICAgKiBAcGFyYW0gc2V0dGluZ0tleXNcbiAgICogQHJldHVybnNcbiAgICovXG4gIGNvbmZpZ3VyYXRpb24uZ2V0Q3VzdG9taXphdGlvblNldHRpbmcgPSBhc3luYyBmdW5jdGlvbiAoXG4gICAgLi4uc2V0dGluZ0tleXM6IHN0cmluZ1tdXG4gICkge1xuICAgIGlmICghc2V0dGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNldHRpbmdzIGRlZmluZWQnKTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudENvbmZpZ3VyYXRpb24gPSBhd2FpdCB0aGlzLmdldChcbiAgICAgICdjdXN0b21pemF0aW9uLmVuYWJsZWQnLFxuICAgICAgLi4uc2V0dGluZ0tleXMsXG4gICAgKTtcblxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBzZXR0aW5nS2V5cy5tYXAoc2V0dGluZ0tleSA9PiBbXG4gICAgICAgIHNldHRpbmdLZXksXG4gICAgICAgIGdldEN1c3RvbWl6YXRpb25TZXR0aW5nKHRoaXMsIGN1cnJlbnRDb25maWd1cmF0aW9uLCBzZXR0aW5nS2V5KSxcbiAgICAgIF0pLFxuICAgICk7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLG1CQUFtQkEsQ0FDMUJDLG9CQUFvQyxFQUNwQ0MsVUFBa0IsRUFDbEJDLEtBQWMsRUFDZDtFQUNBLE9BQU8sT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFDOUJBLEtBQUssQ0FBQ0MsTUFBTSxLQUFLLENBQUMsSUFDbEJILG9CQUFvQixDQUFDSSxTQUFTLENBQUNDLEdBQUcsQ0FBQ0osVUFBVSxDQUFDLENBQUNLLG9CQUFvQixHQUNqRU4sb0JBQW9CLENBQUNPLHVCQUF1QixDQUFDTixVQUFVLENBQUMsR0FDeERDLEtBQUs7QUFDWDtBQU1BLFNBQVNNLHVCQUF1QkEsQ0FDOUJDLGFBQXFDLEVBQ3JDQyxvQkFBNEMsRUFDNUNULFVBQWtCLEVBQ2xCO0VBQ0EsTUFBTVUsc0JBQXNCLEdBQUdELG9CQUFvQixDQUFDLHVCQUF1QixDQUFDO0VBQzVFLE1BQU1FLFlBQVksR0FBR0gsYUFBYSxDQUFDRix1QkFBdUIsQ0FBQ04sVUFBVSxDQUFDO0VBRXRFLElBQ0VVLHNCQUFzQixJQUN0QlYsVUFBVSxDQUFDWSxVQUFVLENBQUMsZUFBZSxDQUFDLElBQ3RDWixVQUFVLEtBQUssdUJBQXVCLEVBQ3RDO0lBQ0EsT0FBTyxPQUFPUyxvQkFBb0IsQ0FBQ1QsVUFBVSxDQUFDLEtBQUssV0FBVyxHQUMxREYsbUJBQW1CLENBQ2pCVSxhQUFhLEVBQ2JSLFVBQVUsRUFDVlMsb0JBQW9CLENBQUNULFVBQVUsQ0FDakMsQ0FBQyxHQUNEVyxZQUFZO0VBQ2xCLENBQUMsTUFBTTtJQUNMLE9BQU9BLFlBQVk7RUFDckI7QUFDRjtBQUVPLFNBQVNFLG9CQUFvQkEsQ0FBQ0wsYUFBNkIsRUFBRTtFQUNsRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VBLGFBQWEsQ0FBQ0QsdUJBQXVCLEdBQUcsZ0JBQ3RDLEdBQUdPLFdBQXFCLEVBQ3hCO0lBQ0EsSUFBSSxDQUFDQSxXQUFXLENBQUNaLE1BQU0sRUFBRTtNQUN2QixNQUFNLElBQUlhLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztJQUN4QztJQUNBLE1BQU1OLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDTCxHQUFHLENBQ3pDLHVCQUF1QixFQUN2QixHQUFHVSxXQUNMLENBQUM7SUFFRCxPQUFPRSxNQUFNLENBQUNDLFdBQVcsQ0FDdkJILFdBQVcsQ0FBQ0ksR0FBRyxDQUFDbEIsVUFBVSxJQUFJLENBQzVCQSxVQUFVLEVBQ1ZPLHVCQUF1QixDQUFDLElBQUksRUFBRUUsb0JBQW9CLEVBQUVULFVBQVUsQ0FBQyxDQUNoRSxDQUNILENBQUM7RUFDSCxDQUFDO0FBQ0gifQ==