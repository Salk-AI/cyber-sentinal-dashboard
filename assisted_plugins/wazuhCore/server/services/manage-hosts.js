"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ManageHosts = void 0;
var _apiUserStatusRunAs = require("../../common/api-user-status-run-as");
var _constants = require("../../common/constants");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
 * Wazuh app - Module to update the configuration file
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
/**
 * This service manages the API connections.
 * Get API hosts configuration
 * Get API host entries (combine configuration and registry data)
 * Create API host
 * Update API host
 * Delete API host
 * Cache the registry data for API hosts
 * Ability to get if the configured user is allowed to use run as
 */
class ManageHosts {
  constructor(logger, configuration) {
    this.logger = logger;
    this.configuration = configuration;
    _defineProperty(this, "serverAPIClient", null);
    _defineProperty(this, "cacheRegistry", new Map());
  }
  setServerAPIClient(client) {
    this.serverAPIClient = client;
  }
  /**
   * Exclude fields from an API host data
   * @param host
   * @param exclude
   * @returns
   */
  filterAPIHostData(host, exclude) {
    return exclude !== null && exclude !== void 0 && exclude.length ? Object.entries(host).reduce((accum, [key, value]) => ({
      ...accum,
      ...(!exclude.includes(key) ? {
        [key]: value
      } : {})
    }), {}) : host;
  }

  /**
   * Get hosts or host by ID from configuration
   */
  async get(hostID, options = {
    excludePassword: false
  }) {
    try {
      hostID ? this.logger.debug(`Getting API connection with ID [${hostID}]`) : this.logger.debug('Getting API connections');
      const hosts = await this.configuration.get('hosts');
      this.logger.debug(`API connections: [${JSON.stringify(hosts)}]`);
      if (hostID) {
        const host = hosts.find(({
          id
        }) => id === hostID);
        if (host) {
          this.logger.debug(`API connection with ID [${hostID}] found`);
          return this.filterAPIHostData(host, options.excludePassword ? ['password'] : undefined);
        }
        const APIConnectionNotFound = `API connection with ID [${hostID}] not found`;
        this.logger.debug(APIConnectionNotFound);
        throw new Error(APIConnectionNotFound);
      }
      return hosts.map(host => this.filterAPIHostData(host, options.excludePassword ? ['password'] : undefined));
    } catch (error) {
      this.logger.error(error.message);
      throw error;
    }
  }

  /**
   * This get all hosts entries in the plugins configuration and the related info in the wazuh-registry.json
   * @param {Object} context
   * @param {Object} request
   * @param {Object} response
   * API entries
   */
  async getEntries(options = {
    excludePassword: false
  }) {
    try {
      this.logger.debug('Getting the API connections');
      const hosts = await this.get(undefined, options);
      this.logger.debug('Getting registry');
      const registry = Object.fromEntries([...this.cacheRegistry.entries()]);
      return hosts.map(host => {
        const {
          id
        } = host;
        return {
          ...host,
          cluster_info: registry[id]
        };
      });
    } catch (error) {
      this.logger.error(error.message);
      throw error;
    }
  }
  isServerAPIClientResponseOk(response) {
    return response.status === _constants.HTTP_STATUS_CODES.OK;
  }

  /**
   * Get the cluster info and allow_run_as values for the API host and store into the registry cache
   * @param host
   * @returns
   */
  async getRegistryDataByHost(host, options) {
    const apiHostID = host.id;
    this.logger.debug(`Getting registry data from host [${apiHostID}]`);
    // Get cluster info data

    let manager = null,
      node = null,
      status = 'disabled',
      cluster = 'Disabled',
      allow_run_as = _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.UNABLE_TO_CHECK;
    try {
      var _responseClusterStatu;
      const responseAgents = await this.serverAPIClient.asInternalUser.request('GET', `/agents`, {
        params: {
          agents_list: '000'
        }
      }, {
        apiHostID
      });
      if (this.isServerAPIClientResponseOk(responseAgents)) {
        manager = responseAgents.data.data.affected_items[0].manager;
      }

      // Get allow_run_as
      const responseAllowRunAs = await this.serverAPIClient.asInternalUser.request('GET', '/security/users/me', {}, {
        apiHostID
      });
      if (this.isServerAPIClientResponseOk(responseAllowRunAs)) {
        const allow_run_as_response = responseAllowRunAs.data.data.affected_items[0].allow_run_as;
        if (host.run_as) {
          allow_run_as = allow_run_as_response ? _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.ENABLED : _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.USER_NOT_ALLOWED;
        } else {
          allow_run_as = allow_run_as_response ? _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.HOST_DISABLED : _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.ALL_DISABLED;
        }
      }
      const responseClusterStatus = await this.serverAPIClient.asInternalUser.request('GET', `/cluster/status`, {}, {
        apiHostID
      });
      if (this.isServerAPIClientResponseOk(responseClusterStatus) && ((_responseClusterStatu = responseClusterStatus.data) === null || _responseClusterStatu === void 0 || (_responseClusterStatu = _responseClusterStatu.data) === null || _responseClusterStatu === void 0 ? void 0 : _responseClusterStatu.enabled) === 'yes') {
        status = 'enabled';
        const responseClusterLocal = await this.serverAPIClient.asInternalUser.request('GET', `/cluster/local/info`, {}, {
          apiHostID
        });
        if (this.isServerAPIClientResponseOk(responseClusterLocal)) {
          node = responseClusterLocal.data.data.affected_items[0].node;
          cluster = responseClusterLocal.data.data.affected_items[0].cluster;
        }
      }
    } catch (error) {
      if (options !== null && options !== void 0 && options.throwError) {
        throw error;
      }
    }
    const data = {
      manager,
      node,
      status,
      cluster,
      allow_run_as
    };
    this.updateRegistryByHost(apiHostID, data);
    return data;
  }

  /**
   * Initialize the service on plugin start.
   * - Get the registry data for the configured API hosts and store into the in memory cache
   * @returns
   */
  async start() {
    try {
      this.logger.debug('Start');
      const hosts = await this.get(undefined, {
        excludePassword: true
      });
      if (!hosts.length) {
        this.logger.debug('No hosts found. Skip.');
        return;
      }
      await Promise.all(hosts.map(host => (async () => [host.id, await this.getRegistryDataByHost(host)])()));
      this.logger.debug('API hosts data stored in the registry');
    } catch (error) {
      this.logger.error(error.message);
      throw error;
    }
  }
  getRegistryByHost(hostID) {
    this.logger.debug(`Getting cache for API host [${hostID}]`);
    const result = this.cacheRegistry.get(hostID);
    this.logger.debug(`Get cache for APIhost [${hostID}]`);
    return result;
  }
  updateRegistryByHost(hostID, data) {
    this.logger.debug(`Updating cache for APIhost [${hostID}]`);
    const result = this.cacheRegistry.set(hostID, data);
    this.logger.debug(`Updated cache for APIhost [${hostID}]`);
    return result;
  }
  deleteRegistryByHost(hostID) {
    this.logger.debug(`Deleting cache for API host [${hostID}]`);
    const result = this.cacheRegistry.delete(hostID);
    this.logger.debug(`Deleted cache for API host [${hostID}]`);
    return result;
  }

  /**
   * Check if the authentication with run_as is enabled and the API user can use it
   * @param apiId
   * @returns
   */
  isEnabledAuthWithRunAs(apiId) {
    this.logger.debug(`Checking if the API host [${apiId}] can use the run_as`);
    const registryHost = this.getRegistryByHost(apiId);
    if (!registryHost) {
      throw new Error(`API host with ID [${apiId}] was not found in the registry. This could be caused by a problem getting and storing the registry data or the API host was removed.`);
    }
    if (registryHost.allow_run_as === _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.UNABLE_TO_CHECK) {
      throw new Error(`API host with host ID [${apiId}] could not check the ability to use the run as. Ensure the API host is accesible and the internal user has the minimal permissions to check this capability.`);
    }
    if (registryHost.allow_run_as === _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.USER_NOT_ALLOWED) {
      throw new Error(`API host with host ID [${apiId}] misconfigured. The configurated API user is not allowed to use [run_as]. Allow it in the API user configuration or set [run_as] host setting with [false] value.`);
    }

    /* The allowed values to compare should be:
      API_USER_STATUS_RUN_AS.ENABLED: use run_as
      API_USER_STATUS_RUN_AS.HOST_DISABLED: not use run_as
      API_USER_STATUS_RUN_AS.ALL_DISABLED: not use run_as
    */
    if (![_apiUserStatusRunAs.API_USER_STATUS_RUN_AS.ENABLED, _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.HOST_DISABLED, _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.ALL_DISABLED].includes(registryHost.allow_run_as)) {
      throw new Error(`API host with host ID [${apiId}] has an unexpected value [${registryHost.allow_run_as}] stored in the registry. This could be caused by a problem getting and storing the registry data.`);
    }
    return registryHost.allow_run_as === _apiUserStatusRunAs.API_USER_STATUS_RUN_AS.ENABLED;
  }
}
exports.ManageHosts = ManageHosts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,