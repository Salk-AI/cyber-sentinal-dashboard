"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhCorePlugin = void 0;
var _nodeCron = require("node-cron");
var _pluginServices = require("./plugin-services");
var _services = require("./services");
var _configuration = require("../common/services/configuration");
var _constants = require("../common/constants");
var _enhanceConfiguration = require("./services/enhance-configuration");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class WazuhCorePlugin {
  constructor(initializerContext) {
    this.initializerContext = initializerContext;
    _defineProperty(this, "logger", void 0);
    _defineProperty(this, "services", void 0);
    _defineProperty(this, "_internal", void 0);
    this.logger = initializerContext.logger.get();
    this.services = {};
    this._internal = {};
  }
  async setup(core, plugins) {
    this.logger.debug('wazuh_core: Setup');
    this.services.dashboardSecurity = (0, _services.createDashboardSecurity)(plugins);
    this._internal.configurationStore = new _services.ConfigurationStore(this.logger.get('configuration-store'), {
      cache_seconds: _constants.WAZUH_CORE_CONFIGURATION_CACHE_SECONDS,
      file: _constants.WAZUH_DATA_CONFIG_APP_PATH
    });
    this.services.configuration = new _configuration.Configuration(this.logger.get('configuration'), this._internal.configurationStore);

    // Enhance configuration service
    (0, _enhanceConfiguration.enhanceConfiguration)(this.services.configuration);

    // Register the plugin settings
    Object.entries(_constants.PLUGIN_SETTINGS).forEach(([key, value]) => this.services.configuration.register(key, value));

    // Add categories to the configuration
    Object.entries(_constants.PLUGIN_SETTINGS_CATEGORIES).forEach(([key, value]) => {
      this.services.configuration.registerCategory({
        ...value,
        id: key
      });
    });

    /* Workaround: Redefine the validation functions of cron.statistics.interval setting.
      Because the settings are defined in the backend and frontend side using the same definitions,
      the validation funtions are not defined there and has to be defined in the frontend side and backend side
      */
    const setting = this.services.configuration._settings.get('cron.statistics.interval');
    !setting.validateUIForm && (setting.validateUIForm = function (value) {
      return this.validate(value);
    });
    !setting.validate && (setting.validate = function (value) {
      return (0, _nodeCron.validate)(value) ? undefined : 'Interval is not valid.';
    });
    this.services.configuration.setup();
    this.services.manageHosts = new _services.ManageHosts(this.logger.get('manage-hosts'), this.services.configuration);
    this.services.serverAPIClient = new _services.ServerAPIClient(this.logger.get('server-api-client'), this.services.manageHosts, this.services.dashboardSecurity);
    this.services.manageHosts.setServerAPIClient(this.services.serverAPIClient);

    // Register a property to the context parameter of the endpoint handlers
    core.http.registerRouteHandlerContext('wazuh_core', (context, request) => {
      return {
        ...this.services,
        api: {
          client: {
            asInternalUser: this.services.serverAPIClient.asInternalUser,
            asCurrentUser: this.services.serverAPIClient.asScoped(context, request)
          }
        }
      };
    });
    return {
      ...this.services,
      api: {
        client: {
          asInternalUser: this.services.serverAPIClient.asInternalUser,
          asScoped: this.services.serverAPIClient.asScoped
        }
      }
    };
  }
  async start(core) {
    this.logger.debug('wazuhCore: Started');
    (0, _pluginServices.setCore)(core);
    await this.services.configuration.start();
    await this.services.manageHosts.start();
    return {
      ...this.services,
      api: {
        client: {
          asInternalUser: this.services.serverAPIClient.asInternalUser,
          asScoped: this.services.serverAPIClient.asScoped
        }
      }
    };
  }
  stop() {}
}
exports.WazuhCorePlugin = WazuhCorePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,