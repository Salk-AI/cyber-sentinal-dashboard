"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.globalTenantName = exports.SAML_AUTH_LOGOUT = exports.SAML_AUTH_LOGIN_WITH_FRAGMENT = exports.SAML_AUTH_LOGIN = exports.ResourceType = exports.PRIVATE_TENANT_SYMBOL = exports.PRIVATE_TENANT_RENDERING_TEXT = exports.PLUGIN_NAME = exports.PLUGIN_ID = exports.OPENID_AUTH_LOGOUT = exports.OPENID_AUTH_LOGIN_WITH_FRAGMENT = exports.OPENID_AUTH_LOGIN = exports.OPENDISTRO_SECURITY_ANONYMOUS = exports.MAX_LENGTH_OF_COOKIE_BYTES = exports.MAX_INTEGER = exports.LOGIN_PAGE_URI = exports.GLOBAL_TENANT_SYMBOL = exports.GLOBAL_TENANT_RENDERING_TEXT = exports.ESTIMATED_IRON_COOKIE_OVERHEAD = exports.ERROR_MISSING_ROLE_PATH = exports.DEFAULT_TENANT = exports.CUSTOM_ERROR_PAGE_URI = exports.CONFIGURATION_API_PREFIX = exports.AuthType = exports.AUTH_RESPONSE_TYPE = exports.AUTH_HEADER_NAME = exports.AUTH_GRANT_TYPE = exports.APP_ID_LOGIN = exports.APP_ID_CUSTOMERROR = exports.API_PREFIX = exports.API_ENDPOINT_DASHBOARDSINFO = exports.API_ENDPOINT_AUTHTYPE = exports.API_ENDPOINT_AUTHINFO = exports.API_AUTH_LOGOUT = exports.API_AUTH_LOGIN = exports.ANONYMOUS_AUTH_LOGOUT = exports.ANONYMOUS_AUTH_LOGIN = void 0;
exports.isGlobalTenant = isGlobalTenant;
exports.isPrivateTenant = isPrivateTenant;
exports.isRenderingPrivateTenant = isRenderingPrivateTenant;
exports.isValidResourceName = isValidResourceName;
/*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

const PLUGIN_ID = exports.PLUGIN_ID = 'opensearchDashboardsSecurity';
const PLUGIN_NAME = exports.PLUGIN_NAME = 'security-dashboards-plugin';
const APP_ID_LOGIN = exports.APP_ID_LOGIN = 'login';
const APP_ID_CUSTOMERROR = exports.APP_ID_CUSTOMERROR = 'customerror';
const OPENDISTRO_SECURITY_ANONYMOUS = exports.OPENDISTRO_SECURITY_ANONYMOUS = 'opendistro_security_anonymous';
const API_PREFIX = exports.API_PREFIX = '/api/v1';
const CONFIGURATION_API_PREFIX = exports.CONFIGURATION_API_PREFIX = 'configuration';
const API_ENDPOINT_AUTHINFO = exports.API_ENDPOINT_AUTHINFO = API_PREFIX + '/auth/authinfo';
const API_ENDPOINT_DASHBOARDSINFO = exports.API_ENDPOINT_DASHBOARDSINFO = API_PREFIX + '/auth/dashboardsinfo';
const API_ENDPOINT_AUTHTYPE = exports.API_ENDPOINT_AUTHTYPE = API_PREFIX + '/auth/type';
const LOGIN_PAGE_URI = exports.LOGIN_PAGE_URI = '/app/' + APP_ID_LOGIN;
const CUSTOM_ERROR_PAGE_URI = exports.CUSTOM_ERROR_PAGE_URI = '/app/' + APP_ID_CUSTOMERROR;
const API_AUTH_LOGIN = exports.API_AUTH_LOGIN = '/auth/login';
const API_AUTH_LOGOUT = exports.API_AUTH_LOGOUT = '/auth/logout';
const OPENID_AUTH_LOGIN = exports.OPENID_AUTH_LOGIN = '/auth/openid/login';
const OPENID_AUTH_LOGIN_WITH_FRAGMENT = exports.OPENID_AUTH_LOGIN_WITH_FRAGMENT = '/auth/openid/captureUrlFragment';
const SAML_AUTH_LOGIN = exports.SAML_AUTH_LOGIN = '/auth/saml/login';
const SAML_AUTH_LOGIN_WITH_FRAGMENT = exports.SAML_AUTH_LOGIN_WITH_FRAGMENT = '/auth/saml/captureUrlFragment';
const ANONYMOUS_AUTH_LOGIN = exports.ANONYMOUS_AUTH_LOGIN = '/auth/anonymous';
const OPENID_AUTH_LOGOUT = exports.OPENID_AUTH_LOGOUT = '/auth/openid/logout';
const SAML_AUTH_LOGOUT = exports.SAML_AUTH_LOGOUT = '/auth/saml/logout';
const ANONYMOUS_AUTH_LOGOUT = exports.ANONYMOUS_AUTH_LOGOUT = '/auth/anonymous/logout';
const ERROR_MISSING_ROLE_PATH = exports.ERROR_MISSING_ROLE_PATH = '/missing-role';
const AUTH_HEADER_NAME = exports.AUTH_HEADER_NAME = 'authorization';
const AUTH_GRANT_TYPE = exports.AUTH_GRANT_TYPE = 'authorization_code';
const AUTH_RESPONSE_TYPE = exports.AUTH_RESPONSE_TYPE = 'code';
const GLOBAL_TENANT_SYMBOL = exports.GLOBAL_TENANT_SYMBOL = '';
const PRIVATE_TENANT_SYMBOL = exports.PRIVATE_TENANT_SYMBOL = '__user__';
const DEFAULT_TENANT = exports.DEFAULT_TENANT = 'default';
const GLOBAL_TENANT_RENDERING_TEXT = exports.GLOBAL_TENANT_RENDERING_TEXT = 'Global';
const PRIVATE_TENANT_RENDERING_TEXT = exports.PRIVATE_TENANT_RENDERING_TEXT = 'Private';
const globalTenantName = exports.globalTenantName = 'global_tenant';
const MAX_INTEGER = exports.MAX_INTEGER = 2147483647;
const MAX_LENGTH_OF_COOKIE_BYTES = exports.MAX_LENGTH_OF_COOKIE_BYTES = 4000;
const ESTIMATED_IRON_COOKIE_OVERHEAD = exports.ESTIMATED_IRON_COOKIE_OVERHEAD = 1.5;
let AuthType = exports.AuthType = /*#__PURE__*/function (AuthType) {
  AuthType["BASIC"] = "basicauth";
  AuthType["OPEN_ID"] = "openid";
  AuthType["JWT"] = "jwt";
  AuthType["SAML"] = "saml";
  AuthType["PROXY"] = "proxy";
  AuthType["ANONYMOUS"] = "anonymous";
  return AuthType;
}({});
let ResourceType = exports.ResourceType = /*#__PURE__*/function (ResourceType) {
  ResourceType["roles"] = "roles";
  ResourceType["users"] = "users";
  ResourceType["permissions"] = "permissions";
  ResourceType["tenants"] = "tenants";
  ResourceType["tenantsManageTab"] = "tenantsManageTab";
  ResourceType["tenantsConfigureTab"] = "tenantsConfigureTab";
  ResourceType["auth"] = "auth";
  ResourceType["auditLogging"] = "auditLogging";
  return ResourceType;
}({});
/**
 * A valid resource name should not containing percent sign (%) as they raise url injection issue.
 * And also should not be empty.
 * @param resourceName resource name to be validated
 */
function isValidResourceName(resourceName) {
  // see: https://javascript.info/regexp-unicode
  const exp = new RegExp('[\\p{C}%]', 'u');
  return !exp.test(resourceName) && resourceName.length > 0;
}
function isPrivateTenant(selectedTenant) {
  return selectedTenant !== null && selectedTenant === PRIVATE_TENANT_SYMBOL;
}
function isRenderingPrivateTenant(selectedTenant) {
  return selectedTenant !== null && (selectedTenant === null || selectedTenant === void 0 ? void 0 : selectedTenant.startsWith(PRIVATE_TENANT_SYMBOL));
}
function isGlobalTenant(selectedTenant) {
  return selectedTenant !== null && selectedTenant === GLOBAL_TENANT_SYMBOL;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,