"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupMultitenantRoutes = setupMultitenantRoutes;
var _configSchema = require("@osd/config-schema");
var _htmlEntities = require("html-entities");
/*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

function setupMultitenantRoutes(router, sessionStorageFactory, securityClient) {
  const PREFIX = '/api/v1';
  const entities = new _htmlEntities.AllHtmlEntities();

  /**
   * Updates selected tenant.
   */
  router.post({
    path: `${PREFIX}/multitenancy/tenant`,
    validate: {
      body: _configSchema.schema.object({
        username: _configSchema.schema.string(),
        tenant: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    const tenant = request.body.tenant;
    const cookie = await sessionStorageFactory.asScoped(request).get();
    if (!cookie) {
      return response.badRequest({
        body: 'Invalid cookie'
      });
    }
    cookie.tenant = tenant;
    sessionStorageFactory.asScoped(request).set(cookie);
    return response.ok({
      body: entities.encode(tenant)
    });
  });

  /**
   * Gets current selected tenant from session.
   */
  router.get({
    path: `${PREFIX}/multitenancy/tenant`,
    validate: false
  }, async (context, request, response) => {
    const cookie = await sessionStorageFactory.asScoped(request).get();
    if (!cookie) {
      return response.badRequest({
        body: 'Invalid cookie.'
      });
    }
    return response.ok({
      body: entities.encode(cookie.tenant)
    });
  });

  /**
   * Gets multitenant info of current user.
   *
   * Sample response of this API:
   * {
   *   "user_name": "admin",
   *   "not_fail_on_forbidden_enabled": false,
   *   "opensearch_dashboards_mt_enabled": true,
   *   "opensearch_dashboards_index": ".opensearch_dashboards",
   *   "opensearch_dashboards_server_user": "opensearch_dashboardsserver"
   * }
   */
  router.get({
    path: `${PREFIX}/multitenancy/info`,
    validate: false
  }, async (context, request, response) => {
    try {
      const esResponse = await securityClient.getMultitenancyInfo(request);
      return response.ok({
        body: esResponse,
        headers: {
          'content-type': 'application/json'
        }
      });
    } catch (error) {
      return response.internalError({
        body: error.message
      });
    }
  });
  router.put({
    path: '/api/v1/configuration/tenancy/config',
    validate: {
      body: _configSchema.schema.object({
        multitenancy_enabled: _configSchema.schema.boolean(),
        private_tenant_enabled: _configSchema.schema.boolean(),
        default_tenant: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    try {
      const esResponse = await securityClient.putMultitenancyConfigurations(request, request.body);
      return response.ok({
        body: esResponse,
        headers: {
          'content-type': 'application/json'
        }
      });
    } catch (error) {
      return response.internalError({
        body: error.message
      });
    }
  });
  router.post({
    // FIXME: Seems this is not being used, confirm and delete if not used anymore
    path: `${PREFIX}/multitenancy/migrate/{tenantindex}`,
    validate: {
      params: _configSchema.schema.object({
        tenantindex: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        force: _configSchema.schema.literal('true')
      })
    }
  }, async (context, request, response) => {
    return response.ok(); // TODO: implement tenant index migration logic
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,