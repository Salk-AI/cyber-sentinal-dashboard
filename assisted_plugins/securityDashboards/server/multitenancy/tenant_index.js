"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.migrateTenantIndices = migrateTenantIndices;
exports.setupIndexTemplate = setupIndexTemplate;
var _core = require("../../../../src/core/server/saved_objects/migrations/core");
var _build_index_map = require("../../../../src/core/server/saved_objects/migrations/core/build_index_map");
var _opensearch_dashboards_migrator = require("../../../../src/core/server/saved_objects/migrations/opensearch_dashboards/opensearch_dashboards_migrator");
var _common = require("../../common");
/*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

async function setupIndexTemplate(esClient, opensearchDashboardsIndex, typeRegistry, logger) {
  const mappings = (0, _core.buildActiveMappings)((0, _opensearch_dashboards_migrator.mergeTypes)(typeRegistry.getAllTypes()));
  try {
    await esClient.indices.putIndexTemplate({
      name: 'tenant_template',
      body: {
        // Setting priority to the max value to avoid being overridden by custom index templates.
        priority: _common.MAX_INTEGER,
        index_patterns: [opensearchDashboardsIndex + '_-*_*', opensearchDashboardsIndex + '_0*_*', opensearchDashboardsIndex + '_1*_*', opensearchDashboardsIndex + '_2*_*', opensearchDashboardsIndex + '_3*_*', opensearchDashboardsIndex + '_4*_*', opensearchDashboardsIndex + '_5*_*', opensearchDashboardsIndex + '_6*_*', opensearchDashboardsIndex + '_7*_*', opensearchDashboardsIndex + '_8*_*', opensearchDashboardsIndex + '_9*_*'],
        template: {
          settings: {
            number_of_shards: 1
          },
          mappings
        }
      }
    });
  } catch (error) {
    logger.error(error);
    throw error;
  }
}
async function migrateTenantIndices(opensearchDashboardsVersion, migrationClient, securityClient, typeRegistry, serializer, logger) {
  let tenantInfo;
  try {
    tenantInfo = await securityClient.getTenantInfoWithInternalUser();
  } catch (error) {
    logger.error(error);
    throw error;
  }

  // follows the same approach in opensearch_dashboards_migrator.ts to initiate DocumentMigrator here
  const documentMigrator = new _core.DocumentMigrator({
    opensearchDashboardsVersion,
    typeRegistry,
    log: logger
  });
  for (const indexName of Object.keys(tenantInfo)) {
    const indexMap = (0, _build_index_map.createIndexMap)({
      opensearchDashboardsIndexName: indexName,
      indexMap: (0, _opensearch_dashboards_migrator.mergeTypes)(typeRegistry.getAllTypes()),
      registry: typeRegistry
    });

    // follows the same aporach in opensearch_dashboards_mirator.ts to construct IndexMigrator
    //
    // FIXME: hard code batchSize, pollInterval, and scrollDuration for now
    //        they are used to fetched from `migration.xxx` config, which is not accessible from new playform
    const indexMigrator = new _core.IndexMigrator({
      batchSize: 100,
      client: migrationClient,
      documentMigrator,
      index: indexName,
      log: logger,
      mappingProperties: indexMap[indexName].typeMappings,
      pollInterval: 1500,
      // millisec
      scrollDuration: '15m',
      serializer,
      obsoleteIndexTemplatePattern: undefined,
      convertToAliasScript: indexMap[indexName].script
    });
    try {
      await indexMigrator.migrate();
    } catch (error) {
      logger.error(error);
      // fail early, exit the kibana process
      // NOTE: according to https://github.com/elastic/kibana/issues/41983 ,
      //       PR https://github.com/elastic/kibana/pull/75819 , API to allow plugins
      //       to set status will be available in 7.10, for now, we fail OpenSearchDashboards
      //       process to indicate index migration error. Customer can fix their
      //       tenant indices in ES then restart OpenSearchDashboards.
      process.exit(1);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,