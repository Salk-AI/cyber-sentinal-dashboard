"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PRIVATE_TENANTS = exports.GLOBAL_TENANTS = void 0;
exports.addTenantParameterToResolvedShortLink = addTenantParameterToResolvedShortLink;
exports.isValidTenant = isValidTenant;
exports.resolve = resolve;
exports.resolveTenant = resolveTenant;
var _lodash = require("lodash");
var _std = require("@osd/std");
var _common = require("../../common");
var _router = require("../../../../src/core/server/http/router");
var _short_url_routes = require("../../../../src/plugins/share/common/short_url_routes");
/*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

const PRIVATE_TENANTS = exports.PRIVATE_TENANTS = [_common.PRIVATE_TENANT_SYMBOL, 'private'];
const GLOBAL_TENANTS = exports.GLOBAL_TENANTS = ['global', _common.GLOBAL_TENANT_SYMBOL, 'Global'];
/**
 * Resovles the tenant the user is using.
 *
 * @param request OpenSearchDashboards request.
 * @param username
 * @param roles
 * @param availableTenants
 * @param config security plugin config.
 * @param cookie cookie extracted from the request. The cookie should have been parsed by AuthenticationHandler.
 * pass it as parameter instead of extracting again.
 * @param multitenancyEnabled
 * @param privateTenantEnabled
 * @param defaultTenant
 *
 * @returns user preferred tenant of the request.
 */
function resolveTenant({
  request,
  username,
  roles,
  availableTenants,
  config,
  cookie,
  multitenancyEnabled,
  privateTenantEnabled,
  defaultTenant
}) {
  var _request$url, _request$url2, _request$url3, _config$multitenancy, _config$multitenancy2;
  const DEFAULT_READONLY_ROLES = ['kibana_read_only'];
  let selectedTenant;
  const securityTenant_ = request === null || request === void 0 || (_request$url = request.url) === null || _request$url === void 0 || (_request$url = _request$url.searchParams) === null || _request$url === void 0 ? void 0 : _request$url.get('securityTenant_');
  const securitytenant = request === null || request === void 0 || (_request$url2 = request.url) === null || _request$url2 === void 0 || (_request$url2 = _request$url2.searchParams) === null || _request$url2 === void 0 ? void 0 : _request$url2.get('securitytenant');
  // eslint-disable-next-line @typescript-eslint/naming-convention
  const security_tenant = request === null || request === void 0 || (_request$url3 = request.url) === null || _request$url3 === void 0 || (_request$url3 = _request$url3.searchParams) === null || _request$url3 === void 0 ? void 0 : _request$url3.get('security_tenant');
  if (securityTenant_) {
    selectedTenant = securityTenant_;
  } else if (securitytenant) {
    selectedTenant = securitytenant;
  } else if (security_tenant) {
    selectedTenant = security_tenant;
  } else if (request.headers.securitytenant || request.headers.securityTenant_) {
    selectedTenant = request.headers.securitytenant ? request.headers.securitytenant : request.headers.securityTenant_;
  } else if (isValidTenant(cookie.tenant)) {
    selectedTenant = cookie.tenant;
  } else if (defaultTenant && multitenancyEnabled) {
    selectedTenant = defaultTenant;
  } else {
    selectedTenant = undefined;
  }
  const isReadonly = roles === null || roles === void 0 ? void 0 : roles.some(role => {
    var _config$readonly_mode;
    return ((_config$readonly_mode = config.readonly_mode) === null || _config$readonly_mode === void 0 ? void 0 : _config$readonly_mode.roles.includes(role)) || DEFAULT_READONLY_ROLES.includes(role);
  });
  const preferredTenants = (_config$multitenancy = config.multitenancy) === null || _config$multitenancy === void 0 ? void 0 : _config$multitenancy.tenants.preferred;
  const globalTenantEnabled = (_config$multitenancy2 = config.multitenancy) === null || _config$multitenancy2 === void 0 ? void 0 : _config$multitenancy2.tenants.enable_global;
  return resolve(username, selectedTenant, preferredTenants, availableTenants, globalTenantEnabled, multitenancyEnabled, privateTenantEnabled);
}
function resolve(username, requestedTenant, preferredTenants, availableTenants,
// is an object like { tenant_name_1: true, tenant_name_2: false, ... }
globalTenantEnabled, multitenancyEnabled, privateTenantEnabled) {
  const availableTenantsClone = (0, _lodash.cloneDeep)(availableTenants);
  delete availableTenantsClone[username];
  if (!globalTenantEnabled && !privateTenantEnabled && (0, _lodash.isEmpty)(availableTenantsClone)) {
    return undefined;
  }
  if (!multitenancyEnabled) {
    if (!globalTenantEnabled) {
      return undefined;
    }
    return _common.GLOBAL_TENANT_SYMBOL;
  }
  if (isValidTenant(requestedTenant)) {
    requestedTenant = requestedTenant;
    if (requestedTenant in availableTenants) {
      return requestedTenant;
    }
    if (privateTenantEnabled && username in availableTenants && PRIVATE_TENANTS.indexOf(requestedTenant) > -1) {
      return _common.PRIVATE_TENANT_SYMBOL;
    }
    if (globalTenantEnabled && GLOBAL_TENANTS.indexOf(requestedTenant) > -1) {
      return _common.GLOBAL_TENANT_SYMBOL;
    }
  }
  if (preferredTenants && !(0, _lodash.isEmpty)(preferredTenants)) {
    for (const element of preferredTenants) {
      const tenant = element.toLowerCase();
      if (globalTenantEnabled && GLOBAL_TENANTS.indexOf(tenant) > -1) {
        return _common.GLOBAL_TENANT_SYMBOL;
      }
      if (privateTenantEnabled && PRIVATE_TENANTS.indexOf(tenant) > -1 && username in availableTenants) {
        return _common.PRIVATE_TENANT_SYMBOL;
      }
      if (tenant in availableTenants) {
        return tenant;
      }
    }
  }
  if (globalTenantEnabled) {
    return _common.GLOBAL_TENANT_SYMBOL;
  }
  if (privateTenantEnabled) {
    return _common.PRIVATE_TENANT_SYMBOL;
  }

  /**
   * Fall back to the first tenant in the available tenants
   * Under the condition of enabling multitenancy, if the user has disabled both 'Global' and 'Private' tenants:
   * it will remove the default global tenant key for custom tenant.
   */
  if (Object.keys(availableTenantsClone).length > 1 && availableTenantsClone.hasOwnProperty(_common.globalTenantName)) {
    delete availableTenantsClone[_common.globalTenantName];
  }
  return (0, _lodash.findKey)(availableTenantsClone, () => true);
}

/**
 * Return true if tenant parameter is a valid tenant.
 *
 * Note: empty string '' is valid, which means global tenant.
 *
 * @param tenant
 */
function isValidTenant(tenant) {
  return tenant !== undefined && tenant !== null;
}

/**
 * If multitenancy is enabled & the URL entered starts with /goto,
 * We will modify the rawResponse to add a new parameter to the URL, the security_tenant (or value for tenant when in multitenancy)
 * With the security_tenant added, the resolved short URL now contains the security_tenant information (so the short URL retains the tenant information).
 **/

function addTenantParameterToResolvedShortLink(request) {
  if (request.url.pathname.startsWith(`${_short_url_routes.GOTO_PREFIX}/`)) {
    const rawRequest = (0, _router.ensureRawRequest)(request);
    const rawResponse = rawRequest.response;
    const responsePath = rawResponse.headers.location;

    // Make sure the request really should redirect
    if (rawResponse.headers.location && !responsePath.includes('security_tenant') && request.headers.securitytenant) {
      // Mutating the headers toolkit.next({headers: ...}) logs a warning about headers being overwritten
      rawResponse.headers.location = (0, _std.modifyUrl)(responsePath, parts => {
        if (parts.query.security_tenant === undefined) {
          parts.query.security_tenant = request.headers.securitytenant;
        }
      });
    }
  }
  return request;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,