"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callTokenEndpoint = callTokenEndpoint;
exports.composeLogoutUrl = composeLogoutUrl;
exports.getBaseRedirectUrl = getBaseRedirectUrl;
exports.getExpirationDate = getExpirationDate;
exports.getNextUrl = getNextUrl;
exports.getRootUrl = getRootUrl;
exports.includeAdditionalParameters = includeAdditionalParameters;
exports.parseTokenResponse = parseTokenResponse;
var _querystring = require("querystring");
/*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

function parseTokenResponse(payload) {
  const payloadString = payload.toString();
  if (payloadString.trim()[0] === '{') {
    try {
      return JSON.parse(payloadString);
    } catch (error) {
      throw Error(`Invalid JSON payload: ${error}`);
    }
  }
  return (0, _querystring.parse)(payloadString);
}
function getRootUrl(config, core, request) {
  var _config$openid;
  const host = core.http.getServerInfo().hostname;
  const port = core.http.getServerInfo().port;
  let protocol = core.http.getServerInfo().protocol;
  let httpHost = `${host}:${port}`;
  if ((_config$openid = config.openid) !== null && _config$openid !== void 0 && _config$openid.trust_dynamic_headers) {
    const xForwardedHost = request.headers['x-forwarded-host'] || undefined;
    const xForwardedProto = request.headers['x-forwarded-proto'] || undefined;
    if (xForwardedHost) {
      httpHost = xForwardedHost;
    }
    if (xForwardedProto) {
      protocol = xForwardedProto;
    }
  }
  return `${protocol}://${httpHost}`;
}
function getBaseRedirectUrl(config, core, request) {
  var _config$openid2;
  if ((_config$openid2 = config.openid) !== null && _config$openid2 !== void 0 && _config$openid2.base_redirect_url) {
    const baseRedirectUrl = config.openid.base_redirect_url;
    return baseRedirectUrl.endsWith('/') ? baseRedirectUrl.slice(0, -1) : baseRedirectUrl;
  }
  const rootUrl = getRootUrl(config, core, request);
  if (core.http.basePath.serverBasePath) {
    return `${rootUrl}${core.http.basePath.serverBasePath}`;
  }
  return rootUrl;
}
function getNextUrl(config, core, request) {
  return request.query.nextUrl || getBaseRedirectUrl(config, core, request) || '/';
}
async function callTokenEndpoint(tokenEndpoint, query, wreckClient) {
  var _tokenResponse$res;
  const tokenResponse = await wreckClient.post(tokenEndpoint, {
    payload: (0, _querystring.stringify)(query),
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  });
  if (!((_tokenResponse$res = tokenResponse.res) !== null && _tokenResponse$res !== void 0 && _tokenResponse$res.statusCode) || tokenResponse.res.statusCode < 200 || tokenResponse.res.statusCode > 299) {
    throw new Error(`Failed calling token endpoint: ${tokenResponse.res.statusCode} ${tokenResponse.res.statusMessage}`);
  }
  const tokenPayload = parseTokenResponse(tokenResponse.payload);
  return {
    idToken: tokenPayload.id_token,
    accessToken: tokenPayload.access_token,
    refreshToken: tokenPayload.refresh_token,
    expiresIn: tokenPayload.expires_in
  };
}
function composeLogoutUrl(customLogoutUrl, idpEndsessionEndpoint, additionalQueryParams) {
  const logoutEndpoint = customLogoutUrl || idpEndsessionEndpoint;
  const logoutUrl = new URL(logoutEndpoint);
  Object.keys(additionalQueryParams).forEach(key => {
    logoutUrl.searchParams.append(key, additionalQueryParams[key]);
  });
  return logoutUrl.toString();
}
function getExpirationDate(tokenResponse) {
  if (!tokenResponse) {
    throw new Error('Invalid token');
  } else if (tokenResponse.idToken) {
    const idToken = tokenResponse.idToken;
    const parts = idToken.split('.');
    if (parts.length !== 3) {
      throw new Error('Invalid token');
    }
    const claim = JSON.parse(Buffer.from(parts[1], 'base64').toString());
    return claim.exp * 1000;
  } else {
    return Date.now() + tokenResponse.expiresIn * 1000;
  }
}
function includeAdditionalParameters(query, context, config) {
  var _config$openid3;
  if ((_config$openid3 = config.openid) !== null && _config$openid3 !== void 0 && _config$openid3.additional_parameters) {
    for (const [key, value] of Object.entries((_config$openid4 = config.openid) === null || _config$openid4 === void 0 ? void 0 : _config$openid4.additional_parameters)) {
      var _config$openid4;
      if (query[key] == null) {
        query[key] = value;
      } else {
        context.security_plugin.logger.warn(`Additional parameter in OpenID config '${key}' was ignored as it would overwrite existing parameters`);
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,