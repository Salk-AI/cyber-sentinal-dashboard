"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JwtAuthentication = exports.JWT_DEFAULT_EXTRA_STORAGE_OPTIONS = void 0;
var _authentication_type = require("../authentication_type");
var _routes = require("./routes");
var _cookie_splitter = require("../../../session/cookie_splitter");
var _jwt_helper = require("./jwt_helper");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
 *   Copyright OpenSearch Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */
const JWT_DEFAULT_EXTRA_STORAGE_OPTIONS = exports.JWT_DEFAULT_EXTRA_STORAGE_OPTIONS = {
  cookiePrefix: 'security_authentication_jwt',
  additionalCookies: 5
};
class JwtAuthentication extends _authentication_type.AuthenticationType {
  constructor(config, sessionStorageFactory, router, esClient, coreSetup, logger) {
    var _this$config$jwt;
    super(config, sessionStorageFactory, router, esClient, coreSetup, logger);
    _defineProperty(this, "type", 'jwt');
    _defineProperty(this, "authHeaderName", void 0);
    this.authHeaderName = ((_this$config$jwt = this.config.jwt) === null || _this$config$jwt === void 0 ? void 0 : _this$config$jwt.header.toLowerCase()) || 'authorization';
  }
  async init() {
    this.createExtraStorage();
    const routes = new _routes.JwtAuthRoutes(this.router, this.sessionStorageFactory, this.config);
    routes.setupRoutes();
  }
  createExtraStorage() {
    // @ts-ignore
    const hapiServer = this.sessionStorageFactory.asScoped({}).server;
    const {
      cookiePrefix,
      additionalCookies
    } = this.getExtraAuthStorageOptions();
    const extraCookieSettings = {
      isSecure: this.config.cookie.secure,
      isSameSite: this.config.cookie.isSameSite,
      password: this.config.cookie.password,
      domain: this.config.cookie.domain,
      path: this.coreSetup.http.basePath.serverBasePath || '/',
      clearInvalid: false,
      isHttpOnly: true,
      ignoreErrors: true,
      encoding: 'iron' // Same as hapi auth cookie
    };

    for (let i = 1; i <= additionalCookies; i++) {
      hapiServer.states.add(cookiePrefix + i, extraCookieSettings);
    }
  }
  getExtraAuthStorageOptions() {
    var _this$config$jwt2, _this$config$jwt3;
    const extraAuthStorageOptions = {
      cookiePrefix: ((_this$config$jwt2 = this.config.jwt) === null || _this$config$jwt2 === void 0 ? void 0 : _this$config$jwt2.extra_storage.cookie_prefix) || JWT_DEFAULT_EXTRA_STORAGE_OPTIONS.cookiePrefix,
      additionalCookies: ((_this$config$jwt3 = this.config.jwt) === null || _this$config$jwt3 === void 0 ? void 0 : _this$config$jwt3.extra_storage.additional_cookies) || JWT_DEFAULT_EXTRA_STORAGE_OPTIONS.additionalCookies,
      logger: this.logger
    };
    return extraAuthStorageOptions;
  }
  getTokenFromUrlParam(request) {
    var _this$config$jwt4;
    const urlParamName = (_this$config$jwt4 = this.config.jwt) === null || _this$config$jwt4 === void 0 ? void 0 : _this$config$jwt4.url_param;
    if (urlParamName) {
      const token = request.url.searchParams.get(urlParamName);
      return token || undefined;
    }
    return undefined;
  }
  getBearerToken(request) {
    const token = this.getTokenFromUrlParam(request);
    if (token) {
      return `Bearer ${token}`;
    }

    // no token in url parameter, try to get token from header
    return request.headers[this.authHeaderName] || undefined;
  }
  requestIncludesAuthInfo(request) {
    var _this$config$jwt5;
    if (request.headers[this.authHeaderName]) {
      return true;
    }
    const urlParamName = (_this$config$jwt5 = this.config.jwt) === null || _this$config$jwt5 === void 0 ? void 0 : _this$config$jwt5.url_param;
    if (urlParamName && request.url.searchParams.get(urlParamName)) {
      return true;
    }
    return false;
  }
  async getAdditionalAuthHeader(request) {
    const header = {};
    const token = this.getTokenFromUrlParam(request);
    if (token) {
      header[this.authHeaderName] = `Bearer ${token}`;
    }
    return header;
  }
  getCookie(request, authInfo) {
    (0, _cookie_splitter.setExtraAuthStorage)(request, this.getBearerToken(request) || '', this.getExtraAuthStorageOptions());
    return {
      username: authInfo.user_name,
      credentials: {
        authHeaderValueExtra: true
      },
      authType: this.type,
      expiryTime: (0, _jwt_helper.getExpirationDate)(this.getBearerToken(request), Date.now() + this.config.session.ttl)
    };
  }
  async isValidCookie(cookie, request) {
    var _cookie$credentials;
    const hasAuthHeaderValue = ((_cookie$credentials = cookie.credentials) === null || _cookie$credentials === void 0 ? void 0 : _cookie$credentials.authHeaderValue) || this.getExtraAuthStorageValue(request, cookie);
    return cookie.authType === this.type && cookie.username && cookie.expiryTime && hasAuthHeaderValue;
  }
  getKeepAliveExpiry(cookie, request) {
    return (0, _jwt_helper.getExpirationDate)(this.buildAuthHeaderFromCookie(cookie, request)[this.authHeaderName], Date.now() + this.config.session.ttl);
  }
  handleUnauthedRequest(request, response, toolkit) {
    return response.unauthorized();
  }
  getExtraAuthStorageValue(request, cookie) {
    var _cookie$credentials2;
    let extraValue = '';
    if (!((_cookie$credentials2 = cookie.credentials) !== null && _cookie$credentials2 !== void 0 && _cookie$credentials2.authHeaderValueExtra)) {
      return extraValue;
    }
    try {
      extraValue = (0, _cookie_splitter.getExtraAuthStorageValue)(request, this.getExtraAuthStorageOptions());
    } catch (error) {
      this.logger.info(error);
    }
    return extraValue;
  }
  buildAuthHeaderFromCookie(cookie, request) {
    var _cookie$credentials3;
    const header = {};
    if (cookie.credentials.authHeaderValueExtra) {
      try {
        const extraAuthStorageValue = this.getExtraAuthStorageValue(request, cookie);
        header.authorization = extraAuthStorageValue;
        return header;
      } catch (error) {
        this.logger.error(error);
      }
    }
    const authHeaderValue = (_cookie$credentials3 = cookie.credentials) === null || _cookie$credentials3 === void 0 ? void 0 : _cookie$credentials3.authHeaderValue;
    if (authHeaderValue) {
      header[this.authHeaderName] = authHeaderValue;
    }
    return header;
  }
}
exports.JwtAuthentication = JwtAuthentication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,