"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhPlugin = void 0;
var _routes = require("./routes");
var _start = require("./start");
var _operators = require("rxjs/operators");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
class WazuhPlugin {
  constructor(initializerContext) {
    this.initializerContext = initializerContext;
    _defineProperty(this, "logger", void 0);
    this.logger = initializerContext.logger.get();
  }
  async setup(core, plugins) {
    this.logger.debug('Wazuh-wui: Setup');
    const serverInfo = core.http.getServerInfo();
    core.http.registerRouteHandlerContext('wazuh', (context, request) => {
      return {
        // Create a custom logger with a tag composed of HTTP method and path endpoint
        logger: this.logger.get(`${request.route.method.toUpperCase()} ${request.route.path}`),
        server: {
          info: serverInfo
        },
        plugins,
        security: plugins.wazuhCore.dashboardSecurity,
        api: context.wazuh_core.api
      };
    });

    // Add custom headers to the responses
    core.http.registerOnPreResponse((request, response, toolkit) => {
      const additionalHeaders = {
        'x-frame-options': 'sameorigin'
      };
      return toolkit.next({
        headers: additionalHeaders
      });
    });

    // Routes
    const router = core.http.createRouter();
    (0, _routes.setupRoutes)(router, plugins.wazuhCore);
    return {};
  }
  async start(core, plugins) {
    const globalConfiguration = await this.initializerContext.config.legacy.globalConfig$.pipe((0, _operators.first)()).toPromise();
    const contextServer = {
      config: globalConfiguration
    };

    // Initialize
    (0, _start.jobInitializeRun)({
      core,
      wazuh: {
        logger: this.logger.get('initialize'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });

    // Sanitize uploaded files tasks
    (0, _start.jobSanitizeUploadedFilesTasksRun)({
      core,
      wazuh: {
        logger: this.logger.get('sanitize-uploaded-files-task'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });

    // Migration tasks
    (0, _start.jobMigrationTasksRun)({
      core,
      wazuh: {
        logger: this.logger.get('migration-task'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });

    // Monitoring
    (0, _start.jobMonitoringRun)({
      core,
      wazuh: {
        logger: this.logger.get('monitoring'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });

    // Scheduler
    (0, _start.jobSchedulerRun)({
      core,
      wazuh: {
        logger: this.logger.get('cron-scheduler'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });

    // Queue
    (0, _start.jobQueueRun)({
      core,
      wazuh: {
        logger: this.logger.get('queue'),
        api: plugins.wazuhCore.api
      },
      wazuh_core: plugins.wazuhCore,
      server: contextServer
    });
    return {};
  }
  stop() {}
}
exports.WazuhPlugin = WazuhPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,