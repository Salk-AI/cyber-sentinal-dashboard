"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhReportingRoutes = WazuhReportingRoutes;
var _controllers = require("../controllers");
var _configSchema = require("@osd/config-schema");
/*
 * Wazuh app - Module for Wazuh reporting routes
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */

function WazuhReportingRoutes(router) {
  const ctrl = new _controllers.WazuhReportingCtrl();
  const agentIDValidation = _configSchema.schema.string({
    minLength: 3,
    validate: agentID => /^\d{3,}$/.test(agentID) ? undefined : 'must be 0-9 are allowed'
  });
  const groupIDValidation = _configSchema.schema.string({
    minLength: 1,
    validate: agentID => /^(?!^(\.{1,2}|all)$)[\w\.\-]+$/.test(agentID) ? undefined : 'must be A-z, 0-9, _, . are allowed. It must not be ., .. or all.'
  });
  const ReportFilenameValidation = _configSchema.schema.string({
    validate: agentID => /^[\w\-\.]+\.pdf$/.test(agentID) ? undefined : 'must be A-z, 0-9, _, ., and - are allowed. It must end with .pdf.'
  });
  const moduleIDValidation = _configSchema.schema.oneOf([_configSchema.schema.literal('general'), _configSchema.schema.literal('fim'), _configSchema.schema.literal('aws'), _configSchema.schema.literal('gcp'), _configSchema.schema.literal('pm'), _configSchema.schema.literal('audit'), _configSchema.schema.literal('sca'), _configSchema.schema.literal('office'), _configSchema.schema.literal('github'), _configSchema.schema.literal('ciscat'), _configSchema.schema.literal('vuls'), _configSchema.schema.literal('mitre'), _configSchema.schema.literal('virustotal'), _configSchema.schema.literal('docker'), _configSchema.schema.literal('osquery'), _configSchema.schema.literal('oscap'), _configSchema.schema.literal('pci'), _configSchema.schema.literal('hipaa'), _configSchema.schema.literal('nist'), _configSchema.schema.literal('gdpr'), _configSchema.schema.literal('tsc')]);
  router.post({
    path: '/reports/modules/{moduleID}',
    validate: {
      body: _configSchema.schema.object({
        array: _configSchema.schema.any(),
        browserTimezone: _configSchema.schema.string(),
        serverSideQuery: _configSchema.schema.maybe(_configSchema.schema.any()),
        filters: _configSchema.schema.maybe(_configSchema.schema.any()),
        agents: _configSchema.schema.maybe(_configSchema.schema.oneOf([agentIDValidation, _configSchema.schema.boolean()])),
        components: _configSchema.schema.maybe(_configSchema.schema.any()),
        searchBar: _configSchema.schema.maybe(_configSchema.schema.string()),
        section: _configSchema.schema.maybe(_configSchema.schema.string()),
        tab: _configSchema.schema.string(),
        tables: _configSchema.schema.maybe(_configSchema.schema.any()),
        time: _configSchema.schema.oneOf([_configSchema.schema.object({
          from: _configSchema.schema.string(),
          to: _configSchema.schema.string()
        }), _configSchema.schema.string()]),
        indexPatternTitle: _configSchema.schema.string(),
        apiId: _configSchema.schema.string()
      }),
      params: _configSchema.schema.object({
        moduleID: moduleIDValidation
      })
    }
  }, (context, request, response) => ctrl.createReportsModules(context, request, response));
  router.post({
    path: '/reports/groups/{groupID}',
    validate: {
      body: _configSchema.schema.object({
        browserTimezone: _configSchema.schema.string(),
        filters: _configSchema.schema.maybe(_configSchema.schema.any()),
        components: _configSchema.schema.maybe(_configSchema.schema.any()),
        section: _configSchema.schema.maybe(_configSchema.schema.string()),
        apiId: _configSchema.schema.string()
      }),
      params: _configSchema.schema.object({
        groupID: groupIDValidation
      })
    }
  }, (context, request, response) => ctrl.createReportsGroups(context, request, response));
  router.post({
    path: '/reports/agents/{agentID}',
    validate: {
      body: _configSchema.schema.object({
        browserTimezone: _configSchema.schema.string(),
        filters: _configSchema.schema.any(),
        components: _configSchema.schema.maybe(_configSchema.schema.any()),
        section: _configSchema.schema.maybe(_configSchema.schema.string()),
        apiId: _configSchema.schema.string()
      }),
      params: _configSchema.schema.object({
        agentID: agentIDValidation
      })
    }
  }, (context, request, response) => ctrl.createReportsAgentsConfiguration(context, request, response));
  router.post({
    path: '/reports/agents/{agentID}/inventory',
    validate: {
      body: _configSchema.schema.object({
        array: _configSchema.schema.any(),
        browserTimezone: _configSchema.schema.string(),
        serverSideQuery: _configSchema.schema.maybe(_configSchema.schema.any()),
        filters: _configSchema.schema.maybe(_configSchema.schema.any()),
        agents: _configSchema.schema.maybe(_configSchema.schema.oneOf([_configSchema.schema.string(), _configSchema.schema.boolean()])),
        components: _configSchema.schema.maybe(_configSchema.schema.any()),
        searchBar: _configSchema.schema.maybe(_configSchema.schema.oneOf([_configSchema.schema.string(), _configSchema.schema.boolean()])),
        section: _configSchema.schema.maybe(_configSchema.schema.string()),
        tab: _configSchema.schema.string(),
        tables: _configSchema.schema.maybe(_configSchema.schema.any()),
        time: _configSchema.schema.oneOf([_configSchema.schema.object({
          from: _configSchema.schema.string(),
          to: _configSchema.schema.string()
        }), _configSchema.schema.string()]),
        indexPatternTitle: _configSchema.schema.string(),
        apiId: _configSchema.schema.string()
      }),
      params: _configSchema.schema.object({
        agentID: agentIDValidation
      })
    }
  }, (context, request, response) => ctrl.createReportsAgentsInventory(context, request, response));

  // Fetch specific report
  router.get({
    path: '/reports/{name}',
    validate: {
      params: _configSchema.schema.object({
        name: ReportFilenameValidation
      })
    }
  }, (context, request, response) => ctrl.getReportByName(context, request, response));

  // Delete specific report
  router.delete({
    path: '/reports/{name}',
    validate: {
      params: _configSchema.schema.object({
        name: ReportFilenameValidation
      })
    }
  }, (context, request, response) => ctrl.deleteReportByName(context, request, response));

  // Fetch the reports list
  router.get({
    path: '/reports',
    validate: false
  }, (context, request, response) => ctrl.getReports(context, request, response));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,