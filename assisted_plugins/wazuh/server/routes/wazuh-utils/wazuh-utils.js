"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhUtilsRoutes = WazuhUtilsRoutes;
var _controllers = require("../../controllers");
var _configSchema = require("@osd/config-schema");
var _constants = require("../../../common/constants");
/*
 * Wazuh app - Module for Wazuh utils routes
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */

function WazuhUtilsRoutes(router, services) {
  const ctrl = new _controllers.WazuhUtilsCtrl();

  // Returns the plugins configuration
  router.get({
    path: '/utils/configuration',
    validate: false
  }, async (context, request, response) => ctrl.getConfiguration(context, request, response));

  // Update the plugins configuration
  router.put({
    path: '/utils/configuration',
    validate: {
      // body: schema.any(),
      body: (value, response) => {
        try {
          const validationSchema = Array.from(services.configuration._settings.entries()).filter(([, {
            isConfigurableFromSettings
          }]) => isConfigurableFromSettings).reduce((accum, [pluginSettingKey, pluginSettingConfiguration]) => ({
            ...accum,
            [pluginSettingKey]: _configSchema.schema.maybe(_configSchema.schema.any({
              validate: pluginSettingConfiguration.validate ? pluginSettingConfiguration.validate.bind(pluginSettingConfiguration) : () => {}
            }))
          }), {});
          const validation = _configSchema.schema.object(validationSchema).validate(value);
          return response.ok(validation);
        } catch (error) {
          return response.badRequest(error.message);
        }
      }
    }
  }, async (context, request, response) => ctrl.updateConfiguration(context, request, response));

  // Upload an asset
  router.put({
    path: '/utils/configuration/files/{key}',
    validate: {
      params: (value, response) => {
        const validationSchema = Array.from(services.configuration._settings.entries())
        // key parameter should be a plugin setting of `filepicker` type
        .filter(([, {
          isConfigurableFromSettings,
          type
        }]) => type === _constants.EpluginSettingType.filepicker && isConfigurableFromSettings).map(([pluginSettingKey]) => _configSchema.schema.literal(pluginSettingKey));
        try {
          const validation = _configSchema.schema.object({
            key: _configSchema.schema.oneOf(validationSchema)
          }).validate(value);
          return response.ok(validation);
        } catch (error) {
          return response.badRequest(error.message);
        }
      },
      body: _configSchema.schema.object({
        // file: buffer
        file: _configSchema.schema.buffer()
      })
    },
    options: {
      body: {
        maxBytes: _constants.CUSTOMIZATION_ENDPOINT_PAYLOAD_UPLOAD_CUSTOM_FILE_MAXIMUM_BYTES
      }
    }
  }, async (context, request, response) => ctrl.uploadFile(context, request, response));

  // Remove an asset
  router.delete({
    path: '/utils/configuration/files/{key}',
    validate: {
      params: (value, response) => {
        const validationSchema = Array.from(services.configuration._settings.entries())
        // key parameter should be a plugin setting of `filepicker` type
        .filter(([, {
          isConfigurableFromSettings,
          type
        }]) => type === _constants.EpluginSettingType.filepicker && isConfigurableFromSettings).map(([pluginSettingKey]) => _configSchema.schema.literal(pluginSettingKey));
        try {
          const validation = _configSchema.schema.object({
            key: _configSchema.schema.oneOf(validationSchema)
          }).validate(value);
          return response.ok(validation);
        } catch (error) {
          return response.badRequest(error.message);
        }
      }
    }
  }, async (context, request, response) => ctrl.deleteFile(context, request, response));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,