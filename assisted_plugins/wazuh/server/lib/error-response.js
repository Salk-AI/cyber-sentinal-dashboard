"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorResponse = ErrorResponse;
/*
 * Wazuh app - Generic error response constructor
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */

/**
 * Error codes:
 * wazuh-api-elastic 20XX
 * wazuh-api         30XX
 * wazuh-elastic     40XX
 * wazuh-reporting   50XX
 * unknown           1000
 */
/**
 * Returns a suitable error message
 * @param {String} message Error message
 * @param {Number} code Error code
 * @param {Number} statusCode Error status code
 * @returns {Object} Error response object
 */
function ErrorResponse(message = null, code = null, statusCode = null, response) {
  message.includes('password: ') ? message = message.split('password: ')[0] + ' password: ***' : false;
  let filteredMessage = '';
  if (code) {
    const isString = typeof message === 'string';
    if (isString && message === 'socket hang up' && code === 3005) {
      filteredMessage = 'Wrong protocol being used to connect to the API';
    } else if (isString && (message.includes('ENOTFOUND') || message.includes('EHOSTUNREACH') || message.includes('EINVAL') || message.includes('EAI_AGAIN')) && code === 3005) {
      filteredMessage = 'API is not reachable. Please check your url and port.';
    } else if (isString && message.includes('ECONNREFUSED') && code === 3005) {
      filteredMessage = 'API is not reachable. Please check your url and port.';
    } else if (isString && message.toLowerCase().includes('not found') && code === 3002) {
      filteredMessage = 'It seems the selected API was deleted.';
    } else if (isString && message.includes('ENOENT') && message.toLowerCase().includes('no such file or directory') && message.toLowerCase().includes('data') && code === 5029 || code === 5030 || code === 5031 || code === 5032) {
      filteredMessage = 'Reporting was aborted - no such file or directory';
    } else if (isString && code === 5029) {
      filteredMessage = `Reporting was aborted (${message})`;
    }
  }
  const statusCodeResponse = statusCode || 500;
  return response.custom({
    statusCode: statusCodeResponse,
    body: {
      message: filteredMessage ? `${code || 1000} - ${filteredMessage}` : typeof message === 'string' ? `${code || 1000} - ${message}` : `${code || 1000} - Unexpected error`,
      code: code || 1000,
      statusCode: statusCodeResponse
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFcnJvclJlc3BvbnNlIiwibWVzc2FnZSIsImNvZGUiLCJzdGF0dXNDb2RlIiwicmVzcG9uc2UiLCJpbmNsdWRlcyIsInNwbGl0IiwiZmlsdGVyZWRNZXNzYWdlIiwiaXNTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInN0YXR1c0NvZGVSZXNwb25zZSIsImN1c3RvbSIsImJvZHkiXSwic291cmNlcyI6WyJlcnJvci1yZXNwb25zZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogV2F6dWggYXBwIC0gR2VuZXJpYyBlcnJvciByZXNwb25zZSBjb25zdHJ1Y3RvclxuICogQ29weXJpZ2h0IChDKSAyMDE1LTIwMjIgV2F6dWgsIEluYy5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEZpbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIG9uIHRoZSBMSUNFTlNFIGZpbGUuXG4gKi9cblxuLyoqXG4gKiBFcnJvciBjb2RlczpcbiAqIHdhenVoLWFwaS1lbGFzdGljIDIwWFhcbiAqIHdhenVoLWFwaSAgICAgICAgIDMwWFhcbiAqIHdhenVoLWVsYXN0aWMgICAgIDQwWFhcbiAqIHdhenVoLXJlcG9ydGluZyAgIDUwWFhcbiAqIHVua25vd24gICAgICAgICAgIDEwMDBcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc3VpdGFibGUgZXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgRXJyb3IgY29kZVxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c0NvZGUgRXJyb3Igc3RhdHVzIGNvZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEVycm9yIHJlc3BvbnNlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gRXJyb3JSZXNwb25zZShtZXNzYWdlID0gbnVsbCwgY29kZSA9IG51bGwsIHN0YXR1c0NvZGUgPSBudWxsLCByZXNwb25zZSkge1xuICBtZXNzYWdlLmluY2x1ZGVzKCdwYXNzd29yZDogJylcbiAgICA/IChtZXNzYWdlID0gbWVzc2FnZS5zcGxpdCgncGFzc3dvcmQ6ICcpWzBdICsgJyBwYXNzd29yZDogKioqJylcbiAgICA6IGZhbHNlO1xuICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gJyc7XG4gIGlmIChjb2RlKSB7XG4gICAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gICAgaWYgKGlzU3RyaW5nICYmIG1lc3NhZ2UgPT09ICdzb2NrZXQgaGFuZyB1cCcgJiYgY29kZSA9PT0gMzAwNSkge1xuICAgICAgZmlsdGVyZWRNZXNzYWdlID0gJ1dyb25nIHByb3RvY29sIGJlaW5nIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgQVBJJztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgaXNTdHJpbmcgJiZcbiAgICAgIChtZXNzYWdlLmluY2x1ZGVzKCdFTk9URk9VTkQnKSB8fFxuICAgICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFSE9TVFVOUkVBQ0gnKSB8fFxuICAgICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFSU5WQUwnKSB8fFxuICAgICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFQUlfQUdBSU4nKSkgJiZcbiAgICAgIGNvZGUgPT09IDMwMDVcbiAgICApIHtcbiAgICAgIGZpbHRlcmVkTWVzc2FnZSA9ICdBUEkgaXMgbm90IHJlYWNoYWJsZS4gUGxlYXNlIGNoZWNrIHlvdXIgdXJsIGFuZCBwb3J0Lic7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyAmJiBtZXNzYWdlLmluY2x1ZGVzKCdFQ09OTlJFRlVTRUQnKSAmJiBjb2RlID09PSAzMDA1KSB7XG4gICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSAnQVBJIGlzIG5vdCByZWFjaGFibGUuIFBsZWFzZSBjaGVjayB5b3VyIHVybCBhbmQgcG9ydC4nO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcgJiYgbWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdub3QgZm91bmQnKSAmJiBjb2RlID09PSAzMDAyKSB7XG4gICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSAnSXQgc2VlbXMgdGhlIHNlbGVjdGVkIEFQSSB3YXMgZGVsZXRlZC4nO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBpc1N0cmluZyAmJlxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnRU5PRU5UJykgJiZcbiAgICAgIG1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScpICYmXG4gICAgICBtZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2RhdGEnKSAmJlxuICAgICAgY29kZSA9PT0gNTAyOSB8fCBjb2RlID09PSA1MDMwIHx8IGNvZGUgPT09IDUwMzEgfHwgY29kZSA9PT0gNTAzMlxuICAgICkge1xuICAgICAgZmlsdGVyZWRNZXNzYWdlID0gJ1JlcG9ydGluZyB3YXMgYWJvcnRlZCAtIG5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnknO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcgJiYgY29kZSA9PT0gNTAyOSkge1xuICAgICAgZmlsdGVyZWRNZXNzYWdlID0gYFJlcG9ydGluZyB3YXMgYWJvcnRlZCAoJHttZXNzYWdlfSlgO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0YXR1c0NvZGVSZXNwb25zZSA9IHN0YXR1c0NvZGUgfHwgNTAwO1xuICByZXR1cm4gcmVzcG9uc2UuY3VzdG9tKHtcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlUmVzcG9uc2UsXG4gICAgYm9keToge1xuICAgICAgbWVzc2FnZTogZmlsdGVyZWRNZXNzYWdlXG4gICAgICAgID8gYCR7Y29kZSB8fCAxMDAwfSAtICR7ZmlsdGVyZWRNZXNzYWdlfWBcbiAgICAgICAgOiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBgJHtjb2RlIHx8IDEwMDB9IC0gJHttZXNzYWdlfWBcbiAgICAgICAgOiBgJHtjb2RlIHx8IDEwMDB9IC0gVW5leHBlY3RlZCBlcnJvcmAsXG4gICAgICBjb2RlOiBjb2RlIHx8IDEwMDAsXG4gICAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlUmVzcG9uc2UsXG4gICAgfSxcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsYUFBYUEsQ0FBQ0MsT0FBTyxHQUFHLElBQUksRUFBRUMsSUFBSSxHQUFHLElBQUksRUFBRUMsVUFBVSxHQUFHLElBQUksRUFBRUMsUUFBUSxFQUFFO0VBQ3RGSCxPQUFPLENBQUNJLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FDekJKLE9BQU8sR0FBR0EsT0FBTyxDQUFDSyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLEdBQzVELEtBQUs7RUFDVCxJQUFJQyxlQUFlLEdBQUcsRUFBRTtFQUN4QixJQUFJTCxJQUFJLEVBQUU7SUFDUixNQUFNTSxRQUFRLEdBQUcsT0FBT1AsT0FBTyxLQUFLLFFBQVE7SUFDNUMsSUFBSU8sUUFBUSxJQUFJUCxPQUFPLEtBQUssZ0JBQWdCLElBQUlDLElBQUksS0FBSyxJQUFJLEVBQUU7TUFDN0RLLGVBQWUsR0FBRyxpREFBaUQ7SUFDckUsQ0FBQyxNQUFNLElBQ0xDLFFBQVEsS0FDUFAsT0FBTyxDQUFDSSxRQUFRLENBQUMsV0FBVyxDQUFDLElBQzVCSixPQUFPLENBQUNJLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFDaENKLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUMxQkosT0FBTyxDQUFDSSxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFDaENILElBQUksS0FBSyxJQUFJLEVBQ2I7TUFDQUssZUFBZSxHQUFHLHVEQUF1RDtJQUMzRSxDQUFDLE1BQU0sSUFBSUMsUUFBUSxJQUFJUCxPQUFPLENBQUNJLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSUgsSUFBSSxLQUFLLElBQUksRUFBRTtNQUN4RUssZUFBZSxHQUFHLHVEQUF1RDtJQUMzRSxDQUFDLE1BQU0sSUFBSUMsUUFBUSxJQUFJUCxPQUFPLENBQUNRLFdBQVcsQ0FBQyxDQUFDLENBQUNKLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSUgsSUFBSSxLQUFLLElBQUksRUFBRTtNQUNuRkssZUFBZSxHQUFHLHdDQUF3QztJQUM1RCxDQUFDLE1BQU0sSUFDTEMsUUFBUSxJQUNSUCxPQUFPLENBQUNJLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFDMUJKLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDLENBQUMsQ0FBQ0osUUFBUSxDQUFDLDJCQUEyQixDQUFDLElBQzNESixPQUFPLENBQUNRLFdBQVcsQ0FBQyxDQUFDLENBQUNKLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFDdENILElBQUksS0FBSyxJQUFJLElBQUlBLElBQUksS0FBSyxJQUFJLElBQUlBLElBQUksS0FBSyxJQUFJLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQ2hFO01BQ0FLLGVBQWUsR0FBRyxtREFBbUQ7SUFDdkUsQ0FBQyxNQUFNLElBQUlDLFFBQVEsSUFBSU4sSUFBSSxLQUFLLElBQUksRUFBRTtNQUNwQ0ssZUFBZSxHQUFJLDBCQUF5Qk4sT0FBUSxHQUFFO0lBQ3hEO0VBQ0Y7RUFFQSxNQUFNUyxrQkFBa0IsR0FBR1AsVUFBVSxJQUFJLEdBQUc7RUFDNUMsT0FBT0MsUUFBUSxDQUFDTyxNQUFNLENBQUM7SUFDckJSLFVBQVUsRUFBRU8sa0JBQWtCO0lBQzlCRSxJQUFJLEVBQUU7TUFDSlgsT0FBTyxFQUFFTSxlQUFlLEdBQ25CLEdBQUVMLElBQUksSUFBSSxJQUFLLE1BQUtLLGVBQWdCLEVBQUMsR0FDdEMsT0FBT04sT0FBTyxLQUFLLFFBQVEsR0FDMUIsR0FBRUMsSUFBSSxJQUFJLElBQUssTUFBS0QsT0FBUSxFQUFDLEdBQzdCLEdBQUVDLElBQUksSUFBSSxJQUFLLHFCQUFvQjtNQUN4Q0EsSUFBSSxFQUFFQSxJQUFJLElBQUksSUFBSTtNQUNsQkMsVUFBVSxFQUFFTztJQUNkO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oifQ==