"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = migrateReportsDirectoryName;
exports.isMD5 = isMD5;
var _fs = _interopRequireDefault(require("fs"));
var _md = _interopRequireDefault(require("md5"));
var _path = _interopRequireDefault(require("path"));
var _constants = require("../../../common/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * This task renames the report user folder from username to hashed username.
 * @param context
 * @returns
 */
function migrateReportsDirectoryName(context) {
  // Create a wrapper function that logs to plugin files and platform logging system
  const createLog = level => message => {
    context.wazuh.logger[level](`migration:reportsDirectoryName: ${message}`);
  };

  // Create the logger
  const logger = {
    info: createLog('info'),
    warn: createLog('warn'),
    error: createLog('error'),
    debug: createLog('debug')
  };
  try {
    logger.debug('Task started: Migrate reports directory name');

    // Skip the task if the directory that stores the reports files doesn't exist in the file system
    if (!_fs.default.existsSync(_constants.WAZUH_DATA_DOWNLOADS_REPORTS_DIRECTORY_PATH)) {
      logger.debug("Reports directory doesn't exist. The task is not required. Skip.");
      return;
    }

    // Read the directories/files in the reports path
    logger.debug(`Reading reports directory: ${_constants.WAZUH_DATA_DOWNLOADS_REPORTS_DIRECTORY_PATH}`);
    _fs.default.readdirSync(_constants.WAZUH_DATA_DOWNLOADS_REPORTS_DIRECTORY_PATH, {
      withFileTypes: true
    }).forEach(fileDirent => {
      // If it is a directory and has not a valid MD5 hash, continue the task.
      if (fileDirent.isDirectory() && !isMD5(fileDirent.name)) {
        // Generate the origin and target path and hash the name
        const originDirectoryPath = _path.default.join(_constants.WAZUH_DATA_DOWNLOADS_REPORTS_DIRECTORY_PATH, fileDirent.name);
        const targetDirectoryName = (0, _md.default)(fileDirent.name);
        const targetDirectoryPath = _path.default.join(_constants.WAZUH_DATA_DOWNLOADS_REPORTS_DIRECTORY_PATH, targetDirectoryName);
        try {
          logger.info(`Found reports directory to migrate: [${fileDirent.name}]`);
          // Rename the directory from origin to target path
          _fs.default.renameSync(originDirectoryPath, targetDirectoryPath);
          logger.info(`Renamed directory [${fileDirent.name} (${originDirectoryPath})] to [${targetDirectoryName} (${targetDirectoryPath})]`);
        } catch (error) {
          logger.error(`Error renaming directory [${fileDirent.name} (${originDirectoryPath})] to [${targetDirectoryName} (${targetDirectoryPath})]: ${error.message}`);
        }
      }
    });
    logger.debug('Task finished: Migrate reports directory name');
  } catch (error) {
    logger.error(`Error: ${error.message}`);
  }
}

// Check that the text is a valid MD5 hash
// https://melvingeorge.me/blog/check-if-string-is-valid-md5-hash-javascript
function isMD5(text) {
  const regexMD5 = /^[a-f0-9]{32}$/gi;
  return regexMD5.test(text);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9tZCIsIl9wYXRoIiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibWlncmF0ZVJlcG9ydHNEaXJlY3RvcnlOYW1lIiwiY29udGV4dCIsImNyZWF0ZUxvZyIsImxldmVsIiwibWVzc2FnZSIsIndhenVoIiwibG9nZ2VyIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImRlYnVnIiwiZnMiLCJleGlzdHNTeW5jIiwiV0FaVUhfREFUQV9ET1dOTE9BRFNfUkVQT1JUU19ESVJFQ1RPUllfUEFUSCIsInJlYWRkaXJTeW5jIiwid2l0aEZpbGVUeXBlcyIsImZvckVhY2giLCJmaWxlRGlyZW50IiwiaXNEaXJlY3RvcnkiLCJpc01ENSIsIm5hbWUiLCJvcmlnaW5EaXJlY3RvcnlQYXRoIiwicGF0aCIsImpvaW4iLCJ0YXJnZXREaXJlY3RvcnlOYW1lIiwibWQ1IiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsInJlbmFtZVN5bmMiLCJ0ZXh0IiwicmVnZXhNRDUiLCJ0ZXN0Il0sInNvdXJjZXMiOlsicmVwb3J0c19kaXJlY3RvcnlfbmFtZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG1kNSBmcm9tICdtZDUnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBXQVpVSF9EQVRBX0RPV05MT0FEU19SRVBPUlRTX0RJUkVDVE9SWV9QQVRIIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5cbi8qKlxuICogVGhpcyB0YXNrIHJlbmFtZXMgdGhlIHJlcG9ydCB1c2VyIGZvbGRlciBmcm9tIHVzZXJuYW1lIHRvIGhhc2hlZCB1c2VybmFtZS5cbiAqIEBwYXJhbSBjb250ZXh0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlUmVwb3J0c0RpcmVjdG9yeU5hbWUoY29udGV4dCkge1xuICAvLyBDcmVhdGUgYSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgbG9ncyB0byBwbHVnaW4gZmlsZXMgYW5kIHBsYXRmb3JtIGxvZ2dpbmcgc3lzdGVtXG4gIGNvbnN0IGNyZWF0ZUxvZyA9IChsZXZlbDogc3RyaW5nKSA9PiBtZXNzYWdlID0+IHtcbiAgICBjb250ZXh0LndhenVoLmxvZ2dlcltsZXZlbF0oYG1pZ3JhdGlvbjpyZXBvcnRzRGlyZWN0b3J5TmFtZTogJHttZXNzYWdlfWApO1xuICB9O1xuXG4gIC8vIENyZWF0ZSB0aGUgbG9nZ2VyXG4gIGNvbnN0IGxvZ2dlciA9IHtcbiAgICBpbmZvOiBjcmVhdGVMb2coJ2luZm8nKSxcbiAgICB3YXJuOiBjcmVhdGVMb2coJ3dhcm4nKSxcbiAgICBlcnJvcjogY3JlYXRlTG9nKCdlcnJvcicpLFxuICAgIGRlYnVnOiBjcmVhdGVMb2coJ2RlYnVnJyksXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBsb2dnZXIuZGVidWcoJ1Rhc2sgc3RhcnRlZDogTWlncmF0ZSByZXBvcnRzIGRpcmVjdG9yeSBuYW1lJyk7XG5cbiAgICAvLyBTa2lwIHRoZSB0YXNrIGlmIHRoZSBkaXJlY3RvcnkgdGhhdCBzdG9yZXMgdGhlIHJlcG9ydHMgZmlsZXMgZG9lc24ndCBleGlzdCBpbiB0aGUgZmlsZSBzeXN0ZW1cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoV0FaVUhfREFUQV9ET1dOTE9BRFNfUkVQT1JUU19ESVJFQ1RPUllfUEFUSCkpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgXCJSZXBvcnRzIGRpcmVjdG9yeSBkb2Vzbid0IGV4aXN0LiBUaGUgdGFzayBpcyBub3QgcmVxdWlyZWQuIFNraXAuXCIsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlYWQgdGhlIGRpcmVjdG9yaWVzL2ZpbGVzIGluIHRoZSByZXBvcnRzIHBhdGhcbiAgICBsb2dnZXIuZGVidWcoXG4gICAgICBgUmVhZGluZyByZXBvcnRzIGRpcmVjdG9yeTogJHtXQVpVSF9EQVRBX0RPV05MT0FEU19SRVBPUlRTX0RJUkVDVE9SWV9QQVRIfWAsXG4gICAgKTtcbiAgICBmcy5yZWFkZGlyU3luYyhXQVpVSF9EQVRBX0RPV05MT0FEU19SRVBPUlRTX0RJUkVDVE9SWV9QQVRILCB7XG4gICAgICB3aXRoRmlsZVR5cGVzOiB0cnVlLFxuICAgIH0pLmZvckVhY2goZmlsZURpcmVudCA9PiB7XG4gICAgICAvLyBJZiBpdCBpcyBhIGRpcmVjdG9yeSBhbmQgaGFzIG5vdCBhIHZhbGlkIE1ENSBoYXNoLCBjb250aW51ZSB0aGUgdGFzay5cbiAgICAgIGlmIChmaWxlRGlyZW50LmlzRGlyZWN0b3J5KCkgJiYgIWlzTUQ1KGZpbGVEaXJlbnQubmFtZSkpIHtcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIG9yaWdpbiBhbmQgdGFyZ2V0IHBhdGggYW5kIGhhc2ggdGhlIG5hbWVcbiAgICAgICAgY29uc3Qgb3JpZ2luRGlyZWN0b3J5UGF0aCA9IHBhdGguam9pbihcbiAgICAgICAgICBXQVpVSF9EQVRBX0RPV05MT0FEU19SRVBPUlRTX0RJUkVDVE9SWV9QQVRILFxuICAgICAgICAgIGZpbGVEaXJlbnQubmFtZSxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0RGlyZWN0b3J5TmFtZSA9IG1kNShmaWxlRGlyZW50Lm5hbWUpO1xuICAgICAgICBjb25zdCB0YXJnZXREaXJlY3RvcnlQYXRoID0gcGF0aC5qb2luKFxuICAgICAgICAgIFdBWlVIX0RBVEFfRE9XTkxPQURTX1JFUE9SVFNfRElSRUNUT1JZX1BBVEgsXG4gICAgICAgICAgdGFyZ2V0RGlyZWN0b3J5TmFtZSxcbiAgICAgICAgKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgICAgIGBGb3VuZCByZXBvcnRzIGRpcmVjdG9yeSB0byBtaWdyYXRlOiBbJHtmaWxlRGlyZW50Lm5hbWV9XWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBSZW5hbWUgdGhlIGRpcmVjdG9yeSBmcm9tIG9yaWdpbiB0byB0YXJnZXQgcGF0aFxuICAgICAgICAgIGZzLnJlbmFtZVN5bmMob3JpZ2luRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgICAgICBgUmVuYW1lZCBkaXJlY3RvcnkgWyR7ZmlsZURpcmVudC5uYW1lfSAoJHtvcmlnaW5EaXJlY3RvcnlQYXRofSldIHRvIFske3RhcmdldERpcmVjdG9yeU5hbWV9ICgke3RhcmdldERpcmVjdG9yeVBhdGh9KV1gLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgYEVycm9yIHJlbmFtaW5nIGRpcmVjdG9yeSBbJHtmaWxlRGlyZW50Lm5hbWV9ICgke29yaWdpbkRpcmVjdG9yeVBhdGh9KV0gdG8gWyR7dGFyZ2V0RGlyZWN0b3J5TmFtZX0gKCR7dGFyZ2V0RGlyZWN0b3J5UGF0aH0pXTogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVGFzayBmaW5pc2hlZDogTWlncmF0ZSByZXBvcnRzIGRpcmVjdG9yeSBuYW1lJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICB9XG59XG5cbi8vIENoZWNrIHRoYXQgdGhlIHRleHQgaXMgYSB2YWxpZCBNRDUgaGFzaFxuLy8gaHR0cHM6Ly9tZWx2aW5nZW9yZ2UubWUvYmxvZy9jaGVjay1pZi1zdHJpbmctaXMtdmFsaWQtbWQ1LWhhc2gtamF2YXNjcmlwdFxuZXhwb3J0IGZ1bmN0aW9uIGlzTUQ1KHRleHQ6IHN0cmluZykge1xuICBjb25zdCByZWdleE1ENSA9IC9eW2EtZjAtOV17MzJ9JC9naTtcbiAgcmV0dXJuIHJlZ2V4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