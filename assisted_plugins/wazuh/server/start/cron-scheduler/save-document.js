"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveDocument = void 0;
var _indexDate = require("../../lib/index-date");
var _constants = require("../../../common/constants");
var _tryCatchForIndexPermissionError = require("../tryCatchForIndexPermissionError");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SaveDocument {
  constructor(context) {
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "esClientInternalUser", void 0);
    this.context = context;
    this.esClientInternalUser = context.core.opensearch.client.asInternalUser;
  }
  async save(doc, indexConfig) {
    const {
      name,
      creation,
      mapping,
      shards,
      replicas
    } = indexConfig;
    const index = await this.addIndexPrefix(name);
    const indexCreation = `${index}-${(0, _indexDate.indexDate)(creation)}`;
    try {
      await this.checkIndexAndCreateIfNotExists(indexCreation, shards, replicas);
      const createDocumentObject = this.createDocument(doc, indexCreation, mapping);
      this.context.wazuh.logger.debug('Bulk data');
      const response = await this.esClientInternalUser.bulk(createDocumentObject);
      this.context.wazuh.logger.debug(`Bulked data. Response of creating the new document ${JSON.stringify(response)}`);
    } catch (error) {
      if (error.status === 403) {
        throw {
          error: 403,
          message: `Authorization Exception in the index "${index}"`
        };
      }
      if (error.status === 409) {
        throw {
          error: 409,
          message: `Duplicate index-pattern: ${index}`
        };
      }
      throw error;
    }
  }
  async checkIndexAndCreateIfNotExists(index, shards, replicas) {
    try {
      await (0, _tryCatchForIndexPermissionError.tryCatchForIndexPermissionError)(index)(async () => {
        this.context.wazuh.logger.debug(`Checking the existence of ${index} index`);
        const exists = await this.esClientInternalUser.indices.exists({
          index
        });
        this.context.wazuh.logger.debug(`Index '${index}' exists? ${exists.body}`);
        if (!exists.body) {
          this.context.wazuh.logger.debug(`Creating ${index} index`);
          await this.esClientInternalUser.indices.create({
            index,
            body: {
              settings: {
                index: {
                  number_of_shards: shards !== null && shards !== void 0 ? shards : _constants.WAZUH_STATISTICS_DEFAULT_INDICES_SHARDS,
                  number_of_replicas: replicas !== null && replicas !== void 0 ? replicas : _constants.WAZUH_STATISTICS_DEFAULT_INDICES_REPLICAS
                }
              }
            }
          });
          this.context.wazuh.logger.info(`${index} index created`);
        }
      })();
    } catch (error) {
      this.checkDuplicateIndexError(error);
    }
  }
  checkDuplicateIndexError(error) {
    var _error$body;
    if (!['resource_already_exists_exception'].includes(error === null || error === void 0 || (_error$body = error.body) === null || _error$body === void 0 || (_error$body = _error$body.error) === null || _error$body === void 0 ? void 0 : _error$body.type)) {
      throw error;
    }
  }
  createDocument(doc, index, mapping) {
    const createDocumentObject = {
      index,
      body: doc.map(item => `{"index": { "_index": "${index}" }}\n${JSON.stringify({
        ...this.buildData(item, mapping),
        timestamp: new Date(Date.now()).toISOString()
      })}\n`).join('')
    };
    this.context.wazuh.logger.debug(`Document object: ${JSON.stringify(createDocumentObject)}`);
    return createDocumentObject;
  }
  buildData(item, mapping) {
    const getItemArray = (array, index) => {
      return JSON.stringify(array[index || 0]);
    };
    const getValue = (key, item) => {
      const keys = key.split('.');
      if (keys.length === 1) {
        if (key.match(/\[.*\]/)) {
          return getItemArray(item[key.replace(/\[.*\]/, '')], key.match(/\[(.*)\]/)[1]);
        }
        return JSON.stringify(item[key]);
      }
      return getValue(keys.slice(1).join('.'), item[keys[0]]);
    };
    if (mapping) {
      let data;
      data = mapping.replace(/\${([a-z|A-Z|0-9|\.\-\_\[.*\]]+)}/gi, (...key) => getValue(key[1], item));
      return JSON.parse(data);
    }
    if (typeof item.data === 'object') {
      return item.data;
    }
    return {
      data: item.data
    };
  }
  async addIndexPrefix(index) {
    const prefix = await this.context.wazuh_core.configuration.get('cron.prefix');
    return `${prefix}-${index}`;
  }
}
exports.SaveDocument = SaveDocument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,