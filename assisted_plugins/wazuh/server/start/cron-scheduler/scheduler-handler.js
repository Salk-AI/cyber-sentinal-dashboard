"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jobSchedulerRun = jobSchedulerRun;
var _index = require("./index");
var _configuredJobs = require("./configured-jobs");
var _nodeCron = _interopRequireDefault(require("node-cron"));
var _constants = require("../../../common/constants");
var _statisticsTemplate = require("../../integration-files/statistics-template");
var _utils = require("../../../common/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const schedulerJobs = [];

/**
 * Wait until Kibana server is ready
 */
const checkPluginPlatformStatus = async function (context) {
  try {
    context.wazuh.logger.debug('Waiting for platform servers to be ready...');
    await checkElasticsearchServer(context);
    await checkTemplate(context);
    return;
  } catch (error) {
    context.wazuh.logger.warn(error.message || error);
    try {
      await (0, _utils.delayAsPromise)(3000);
      await checkPluginPlatformStatus(context);
    } catch (error) {}
  }
};

/**
 * Check Elasticsearch Server status and Kibana index presence
 */
const checkElasticsearchServer = async function (context) {
  context.wazuh.logger.debug(`Checking the existence of ${context.server.config.opensearchDashboards.index} index`);
  const data = await context.core.opensearch.client.asInternalUser.indices.exists({
    index: context.server.config.opensearchDashboards.index
  });
  return data.body;
};

/**
 * Verify wazuh-statistics template
 */
const checkTemplate = async function (context) {
  try {
    const appConfig = await context.wazuh_core.configuration.get();
    const prefixTemplateName = appConfig['cron.prefix'];
    const statisticsIndicesTemplateName = appConfig['cron.statistics.index.name'];
    const pattern = `${prefixTemplateName}-${statisticsIndicesTemplateName}-*`;
    try {
      // Check if the template already exists
      context.wazuh.logger.debug(`Getting the ${_constants.WAZUH_STATISTICS_TEMPLATE_NAME} template`);
      const currentTemplate = await context.core.opensearch.client.asInternalUser.indices.getTemplate({
        name: _constants.WAZUH_STATISTICS_TEMPLATE_NAME
      });
      // Copy already created index patterns
      _statisticsTemplate.statisticsTemplate.index_patterns = currentTemplate.body[_constants.WAZUH_STATISTICS_TEMPLATE_NAME].index_patterns;
    } catch (error) {
      // Init with the default index pattern
      _statisticsTemplate.statisticsTemplate.index_patterns = [pattern];
    }

    // Check if the user is using a custom pattern and add it to the template if it does
    if (!_statisticsTemplate.statisticsTemplate.index_patterns.includes(pattern)) {
      _statisticsTemplate.statisticsTemplate.index_patterns.push(pattern);
    }

    // Update the statistics template
    context.wazuh.logger.debug(`Updating the ${_constants.WAZUH_STATISTICS_TEMPLATE_NAME} template`);
    await context.core.opensearch.client.asInternalUser.indices.putTemplate({
      name: _constants.WAZUH_STATISTICS_TEMPLATE_NAME,
      body: _statisticsTemplate.statisticsTemplate
    });
    context.wazuh.logger.info(`Updated the ${_constants.WAZUH_STATISTICS_TEMPLATE_NAME} template`);
  } catch (error) {
    context.wazuh.logger.error(`Something went wrong updating the ${_constants.WAZUH_STATISTICS_TEMPLATE_NAME} template ${error.message || error}`);
    throw error;
  }
};
async function jobSchedulerRun(context) {
  // Check Kibana index and if it is prepared, start the initialization of Wazuh App.
  await checkPluginPlatformStatus(context);
  const jobs = await (0, _configuredJobs.configuredJobs)(context, {});
  for (const job in jobs) {
    const schedulerJob = new _index.SchedulerJob(job, context);
    schedulerJobs.push(schedulerJob);
    const task = _nodeCron.default.schedule(jobs[job].interval, () => schedulerJob.run());
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,