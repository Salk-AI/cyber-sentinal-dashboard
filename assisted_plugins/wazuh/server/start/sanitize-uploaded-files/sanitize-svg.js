"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sanitizeUploadedSVG;
var _fs = _interopRequireDefault(require("fs"));
var _glob = _interopRequireDefault(require("glob"));
var _path = _interopRequireDefault(require("path"));
var _sanitizer = require("../../lib/sanitizer");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * This task checks for custom SVG files uploaded by the user and sanitizes them.
 * The goal is to sanitize any previously uploaded SVG file.
 * @param context
 * @returns
 */
async function sanitizeUploadedSVG(context) {
  // Create a wrapper function that logs to plugin files and platform logging system
  const createLog = level => message => {
    context.wazuh.logger[level](`sanitize:sanitizeUploadedSVG: ${message}`);
  };

  // Create the logger
  const logger = {
    info: createLog('info'),
    warn: createLog('warn'),
    error: createLog('error'),
    debug: createLog('debug')
  };
  try {
    logger.debug('Task sanitize SVG started');
    logger.debug('Get plugins configuration');
    const configuration = await context.wazuh_core.configuration.get();
    const logosSettingKeys = ['customization.logo.sidebar', 'customization.logo.app', 'customization.logo.healthcheck'];
    logger.debug('Check configuration for custom branding uploaded SVG files');
    // Check each of the possible custom settings uploaded files look for SVG to sanitize
    logosSettingKeys.forEach(async logoKey => {
      const logoSetting = context.wazuh_core.configuration._settings.get(logoKey);
      const customLogoPath = configuration[logoKey];
      if (!logoSetting || !customLogoPath) {
        logger.debug(`Logo [${logoKey}] not customized. Skip.`);
        return;
      }

      // Parse the configured logo information and remove the timestamp used as version control
      const configuredCustomLogo = {
        subpath: _path.default.dirname(customLogoPath),
        fileName: _path.default.basename(customLogoPath.replace(/\?v=[\d].*/g, '')),
        fileExtension: _path.default.extname(customLogoPath.replace(/\?v=[\d].*/g, ''))
      };

      // If the configured custom logo is not a SVG file there's nothing to do
      if (configuredCustomLogo.fileExtension.toLocaleLowerCase() !== '.svg') {
        return;
      }

      // The assets folder is the base folder used in the frontend. It's concatenated with the path configured in the
      const targetDirectory = _path.default.join(__dirname, '../../../public/assets', configuredCustomLogo.subpath);

      // If the setting folder doesn't exist abort
      if (!_fs.default.existsSync(targetDirectory)) {
        return;
      }

      // Read the file contents
      const fileFullPath = _path.default.join(targetDirectory, configuredCustomLogo.fileName);

      // Get the files related to the setting
      const file = _glob.default.sync(fileFullPath);

      // If the file doesn't exists abort
      if (!(file !== null && file !== void 0 && file.length)) {
        return;
      }
      const originalFileBuffer = _fs.default.readFileSync(fileFullPath);

      // Sanitize the file contents
      const originalSVGString = originalFileBuffer.toString();
      const cleanSVG = (0, _sanitizer.sanitizeSVG)(originalSVGString);
      const cleanFileBuffer = Buffer.from(cleanSVG);

      // Check if any changes were made in the sanitization process ignoring white spaces
      // If any change was made then save the sanitized content
      if (originalSVGString.replace(/\s/g, '') != cleanSVG.replace(/\s/g, '')) {
        logger.debug(`${configuredCustomLogo.fileName} SVG file sanitized`);
        // Delete the original file
        _fs.default.unlinkSync(fileFullPath);

        // Save the clean file in the target directory
        _fs.default.writeFileSync(fileFullPath, cleanFileBuffer);

        // Update the setting in the configuration cache
        const pluginSettingValue = logoSetting.options.file.store.resolveStaticURL(configuredCustomLogo.fileName);
        await context.wazuh_core.configuration.set({
          [logoKey]: pluginSettingValue
        });
      }
    });
    logger.debug('Task finished');
  } catch (error) {
    logger.error(`Error: ${error.message}`);
  }
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,